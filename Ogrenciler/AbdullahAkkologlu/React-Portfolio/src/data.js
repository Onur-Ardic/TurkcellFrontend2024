export const data = [
  {
    gif: "assets/bookify.gif",
    name: "Bookify",
    techs: ["sass", "bootstrap", "js"],
    desc: "With the Bookify project, you can create your own library, use it as a wishlist or keep track of the books you read. In this project, I used Bootstrap and SCSS in the UI to create a modern design. I used JSON-Server to save the data and performed all frontend operations with Vanilla JavaScript.",
    demo: "https://bookify-akkologlu.vercel.app/",
    code: "https://github.com/akkologlu/bookify-turkcell",
  },
  {
    gif: "assets/flight.gif",
    name: "FlyPqs",
    techs: ["tailwind", "react"],
    desc: "FlyPqs is a dynamic web application that enables users to search and list flights on specific dates and at airports. It stands out with its intuitive interface and visual animation presented at first use. Flight information is showcased with easy sorting and filtering features, prioritizing user experience.",
    demo: "https://flypqs.netlify.app/",
    code: "https://github.com/akkologlu/FlightSearchApplication",
  },
  {
    gif: "assets/movie.gif",
    name: "Watchlyst",
    techs: ["tailwind", "react", "redux"],
    desc: "Watchlyst, using the TMDB API, is a React-based platform allowing users to easily create and manage personalized watchlists. Discover the latest and popular movies, search for specific titles, and access detailed information on individual movie pages. Tailwind CSS ensures a sleek design. After watching, effortlessly remove movies from your watchlist. Streamlining movie discovery and user control, Watchlyst offers a concise and user-friendly experience.",
    demo: "https://watchlyst.netlify.app/",
    code: "https://github.com/akkologlu/watchlist",
  },
  {
    gif: "assets/xox.gif",
    name: "Tic-Tac-Toe",
    techs: ["css", "js"],
    desc: "Tic-Tac-Toe is a classic game implemented using simple HTML, CSS, and JavaScript. It features a minimalist design and intuitive user interface, making it easy and fun to play. The game allows two players to compete against each other.",
    demo: "https://xox-turkcell.vercel.app/",
    code: "https://github.com/waroi/TurkcellFrontend2024/tree/main/Ogrenciler/AbdullahAkkologlu/Mentor-Odev/TicTacToe",
  },
  {
    gif: "assets/wormhole.gif",
    name: "Wormhole",
    techs: ["css", "sass", "bootstrap"],
    desc: "The Wormhole project represents an e-commerce site that allows renting time machines. In this project, my goal was to design a user interface suitable for the theme using Bootstrap and SASS/SCSS.",
    demo: "https://akkologlu.github.io/wormhole-turkcell/",
    code: "https://github.com/akkologlu/wormhole-turkcell",
  },
  {
    gif: "assets/rock.gif",
    name: "Rock-Paper-Scissors",
    techs: ["css", "js"],
    desc: "Rock-Paper-Scissors is a simple and fun game built with HTML, CSS, and JavaScript. Players can compete against the computer, which uses random choices to play. The interface is designed to be engaging and visually appealing, making it an enjoyable quick game.",
    demo: "https://rock-paper-scissors-turkcell.vercel.app/",
    code: "https://github.com/waroi/TurkcellFrontend2024/tree/main/Ogrenciler/AbdullahAkkologlu/Mentor-Odev/Rock-Paper-Scissors",
  },
  {
    gif: "assets/memory.gif",
    name: "Memory Game",
    techs: ["css", "js"],
    desc: "Memory Game is an interactive and educational game designed to test and improve memory skills. Built with HTML, CSS, and JavaScript. Players flip cards to find matching pairs, aiming to complete the game in the fewest moves possible.",
    demo: "https://memory-game-turkcell.vercel.app/",
    code: "https://github.com/waroi/TurkcellFrontend2024/tree/main/Ogrenciler/AbdullahAkkologlu/Mentor-Odev/MemoryGame",
  },
  {
    gif: "assets/dvh.gif",
    name: "Digital Vehicle License",
    techs: ["solidity", "tailwind", "react", "ipfs"],
    desc: "Digital Vehicle Licence is a project that aims to revolutionise the way vehicle records are managed and accessed. Using blockchain technology, it enables secure, transparent and immutable record keeping. Features include accident records, maintenance and inspection records, historical ownership information, and tracking the condition of vehicle parts.",
    demo: "https://digitalvehiclelicense.netlify.app/",
    code: "https://github.com/akkologlu/DigitalVehicleLicense",
  },
  {
    gif: "assets/skyhub.gif",
    name: "SkyHub",
    techs: ["tailwind", "react", "redux"],
    desc: "In this project, a user-friendly website has been prepared that allows users to seamlessly view location information as well as the current weather page. The search page allows effortless checking of the weather for any desired location. More importantly, cities can be added to favourites, making it easier to track weather information for preferred locations.",
    demo: "https://skyhub.netlify.app/",
    code: "https://github.com/akkologlu/SkyHub",
  },
  //   {
  //     gif: "assets/skyhub.gif",
  //     name: "Cover Letter Generator",
  //     techs: ["tailwind", "react"],
  //     desc: "This project aims to develop a software application that offers users the opportunity to create cover letters quickly and effectively. After entering their personal information and details about the position they are applying for, users will have a professionally prepared cover letter generated by artificial intelligence.",
  //   },
  {
    gif: "assets/2000words.gif",
    name: "2000Words",
    techs: ["tailwind", "react", "nodejs", "mongodb", "expressjs"],
    desc: "2000Words is a practical and interactive educational platform for learning the basic 2000 words in the English language. Users can easily learn and practice unfamiliar words with smart flash cards. Enrich your language skills and make your communication more effective with the power of 2000 words.",
    demo: "https://github.com/akkologlu/2000Words",
    code: "https://github.com/akkologlu/2000Words",
  },
];

export const articlesData = [
  {
    status: "ok",
    feed: {
      url: "https://medium.com/feed/@akkologlu",
      title: "Stories by Abdullah Akkoloğlu on Medium",
      link: "https://medium.com/@akkologlu?source=rss-aeb260affefe------2",
      author: "",
      description: "Stories by Abdullah Akkoloğlu on Medium",
      image:
        "https://cdn-images-1.medium.com/fit/c/150/150/1*tZD0XJSaW2zyYUpo-cQ_mA.jpeg",
    },
    items: [
      {
        title: "Kişisel NPX Komutu Nasıl Oluşturulur?",
        pubDate: "2024-06-15 20:38:21",
        link: "https://akkologlu.medium.com/ki%C5%9Fisel-npx-komutu-nas%C4%B1l-olu%C5%9Fturulur-7c0de9ca9d06?source=rss-aeb260affefe------2",
        guid: "https://medium.com/p/7c0de9ca9d06",
        author: "Abdullah Akkoloğlu",
        thumbnail: "",
        description:
          '\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*skcyTZeURvigPH1UHPN30A.jpeg"></figure><p>Merhaba değerleri okurlar. Bu yazımda sizlere kişisel NPX komutunu nasıl oluşturabileceğinizi anlatacağım. Bu komutu ben kişisel kart olarak kullanıyorum. Terminallerinde npx akkologlu komutunu yazanların karşısına işte şöyle bir ekran çıkıyor:</p>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/563/1*WSN8JfgqIGPePyozrVrfMg.png"></figure><p>Siz de denemek isterseniz:</p>\n<pre>npx akkologlu</pre>\n<p>Peki bunu nasıl yapabiliriz? Bunun için bir npm projesi oluşturuyoruz. Önce bir klasör açıyoruz ve ardından komutu yazıp ilk kurulumuzu yapıyoruz.</p>\n<pre>npm init -y</pre>\n<p>Gerekli bağımlılıkları yükleyelim:</p>\n<pre>npm install chalk terminal-image got</pre>\n<ul>\n<li>\n<strong>chalk</strong>: Terminalde renkli metinler yazmak için kullanılır.</li>\n<li>\n<strong>terminal-image</strong>: Terminalde resim görüntülemek için kullanılır.</li>\n<li>\n<strong>got</strong>: HTTP istekleri yapmak için kullanılır.</li>\n</ul>\n<p>Bağımlılıklarımızı yükledikten sonra javascript kodlarımızı yazacağımız index.js dosyasını ana dizinde oluşturalım. Ve ilk satırına şu komutu ekleyelim:</p>\n<pre>#!/usr/bin/env node</pre>\n<p>Bu komutu yazma sebebimiz npx olarak çalıştırılan paketin direkt olarak terminalde çalışmasını sağlamaktır.</p>\n<p>Bağımlılıklarımızı import edelim:</p>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/958/1*odd5FZUReieOvh0XmiN0Tw.png"></figure><p>Öncelikle terminalde görüntülemek istediğimiz fotoğraf için kodlarımızı yazalım:</p>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*-HpyLcnIl-mWOgACQ03WJw.png"></figure><p>terminal-image paketinin tüm özelliklerine erişmek için:</p>\n<p><a href="https://www.npmjs.com/package/terminal-image">terminal-image</a></p>\n<p>Daha sonra chalk paketi ile birlikte terminalde görünmesini istediğiniz şeyleri yazabilirsiniz:</p>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*87qA3IMKyzSn8sg2F2EFEQ.png"></figure><p>chalk paketinin tüm özelliklerine erişmek için:</p>\n<p><a href="https://www.npmjs.com/package/chalk">chalk</a></p>\n<p>Bu adımlardan sonra index.js dosyamız şuna benzemeli:</p>\n<pre>#!/usr/bin/env node<br>import chalk from "chalk";<br>import terminalImage from "terminal-image";<br>import got from "got";<br><br>const body = await got("https://example.jpg").buffer();<br>console.log(<br>  await terminalImage.buffer(body, {<br>    width: "100%",<br>    height: "100%",<br>  })<br>);<br>console.log(chalk.blue.bold("Email: example@mail.com"));<br>console.log(chalk.magenta("GitHub: https://github.com/someone"));<br>console.log(chalk.cyan("LinkedIn: https://www.linkedin.com/in/someone"));<br></pre>\n<p>Ve her şey hazır. Bundan sonra yapmanız gereken bu paketi npm.js’de yayınlamak. Paketinizi npm.js’de nasıl yayınlayacağınızı anlattığım yazımı okumak isterseniz: <a href="https://medium.com/%40akkologlu/npm-paketi-nas%C4%B1l-yay%C4%B1nlan%C4%B1r-8a87bb9a392d">NPM Paketi Nasıl Yayınlanır?</a></p>\n<p>akkologlu paketinin linkleri: <a href="https://www.npmjs.com/package/akkologlu">npmjs.org</a> <a href="https://github.com/akkologlu/npx-akkologlu">GitHub</a></p>\n<img src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=7c0de9ca9d06" width="1" height="1" alt="">\n',
        content:
          '\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*skcyTZeURvigPH1UHPN30A.jpeg"></figure><p>Merhaba değerleri okurlar. Bu yazımda sizlere kişisel NPX komutunu nasıl oluşturabileceğinizi anlatacağım. Bu komutu ben kişisel kart olarak kullanıyorum. Terminallerinde npx akkologlu komutunu yazanların karşısına işte şöyle bir ekran çıkıyor:</p>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/563/1*WSN8JfgqIGPePyozrVrfMg.png"></figure><p>Siz de denemek isterseniz:</p>\n<pre>npx akkologlu</pre>\n<p>Peki bunu nasıl yapabiliriz? Bunun için bir npm projesi oluşturuyoruz. Önce bir klasör açıyoruz ve ardından komutu yazıp ilk kurulumuzu yapıyoruz.</p>\n<pre>npm init -y</pre>\n<p>Gerekli bağımlılıkları yükleyelim:</p>\n<pre>npm install chalk terminal-image got</pre>\n<ul>\n<li>\n<strong>chalk</strong>: Terminalde renkli metinler yazmak için kullanılır.</li>\n<li>\n<strong>terminal-image</strong>: Terminalde resim görüntülemek için kullanılır.</li>\n<li>\n<strong>got</strong>: HTTP istekleri yapmak için kullanılır.</li>\n</ul>\n<p>Bağımlılıklarımızı yükledikten sonra javascript kodlarımızı yazacağımız index.js dosyasını ana dizinde oluşturalım. Ve ilk satırına şu komutu ekleyelim:</p>\n<pre>#!/usr/bin/env node</pre>\n<p>Bu komutu yazma sebebimiz npx olarak çalıştırılan paketin direkt olarak terminalde çalışmasını sağlamaktır.</p>\n<p>Bağımlılıklarımızı import edelim:</p>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/958/1*odd5FZUReieOvh0XmiN0Tw.png"></figure><p>Öncelikle terminalde görüntülemek istediğimiz fotoğraf için kodlarımızı yazalım:</p>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*-HpyLcnIl-mWOgACQ03WJw.png"></figure><p>terminal-image paketinin tüm özelliklerine erişmek için:</p>\n<p><a href="https://www.npmjs.com/package/terminal-image">terminal-image</a></p>\n<p>Daha sonra chalk paketi ile birlikte terminalde görünmesini istediğiniz şeyleri yazabilirsiniz:</p>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*87qA3IMKyzSn8sg2F2EFEQ.png"></figure><p>chalk paketinin tüm özelliklerine erişmek için:</p>\n<p><a href="https://www.npmjs.com/package/chalk">chalk</a></p>\n<p>Bu adımlardan sonra index.js dosyamız şuna benzemeli:</p>\n<pre>#!/usr/bin/env node<br>import chalk from "chalk";<br>import terminalImage from "terminal-image";<br>import got from "got";<br><br>const body = await got("https://example.jpg").buffer();<br>console.log(<br>  await terminalImage.buffer(body, {<br>    width: "100%",<br>    height: "100%",<br>  })<br>);<br>console.log(chalk.blue.bold("Email: example@mail.com"));<br>console.log(chalk.magenta("GitHub: https://github.com/someone"));<br>console.log(chalk.cyan("LinkedIn: https://www.linkedin.com/in/someone"));<br></pre>\n<p>Ve her şey hazır. Bundan sonra yapmanız gereken bu paketi npm.js’de yayınlamak. Paketinizi npm.js’de nasıl yayınlayacağınızı anlattığım yazımı okumak isterseniz: <a href="https://medium.com/%40akkologlu/npm-paketi-nas%C4%B1l-yay%C4%B1nlan%C4%B1r-8a87bb9a392d">NPM Paketi Nasıl Yayınlanır?</a></p>\n<p>akkologlu paketinin linkleri: <a href="https://www.npmjs.com/package/akkologlu">npmjs.org</a> <a href="https://github.com/akkologlu/npx-akkologlu">GitHub</a></p>\n<img src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=7c0de9ca9d06" width="1" height="1" alt="">\n',
        enclosure: {},
        categories: ["npm-package", "npx", "npm", "portfolio"],
      },
      {
        title: "React Uygulamasına Medium API Entegrasyonu",
        pubDate: "2024-06-03 18:41:32",
        link: "https://akkologlu.medium.com/react-uygulamas%C4%B1na-medium-api-entegrasyonu-77c745d3ba8b?source=rss-aeb260affefe------2",
        guid: "https://medium.com/p/77c745d3ba8b",
        author: "Abdullah Akkoloğlu",
        thumbnail: "",
        description:
          '\n<p>Merhaba değerli okurlar, bu yazımda React uygulamalarınızda Medium yazılarını nasıl entegre edebileceğinizi göstereceğim.</p>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*KHGSj0HJqNd8Flk85PWAXw.jpeg"></figure><h3>API Endpoint</h3>\n<p>Öncelikle, istek atacağımız endpoint’in sonuna hangi hesabın makalelerini çekmek istiyorsak o kullanıcı adını yazıyoruz:</p>\n<pre>  https://api.rss2json.com/v1/api.json?rss_url=https://medium.com/feed/@your-user-name</pre>\n<p>Daha sonra, fetch isteği yapacağımız fonksiyonu yazıyoruz:</p>\n<pre>const endpoint =<br>  "https://api.rss2json.com/v1/api.json?rss_url=https://medium.com/feed/@your-user-name";<br>export const readArticles = async () =&gt; {<br>  const response = await fetch(endpoint);<br>  if (!response.ok) {<br>    throw new Error("Error");<br>  }<br>  const result = await response.json();<br>  return result;<br>};</pre>\n<p>Son olarak, bu fonksiyondan dönen bilgileri bir state’e atıp inceleyelim:</p>\n<pre>  const [articles, setArticles] = useState([]);<br>  const fetchData = async () =&gt; {<br>    const result = await readArticles();<br>    setArticles(result.items);<br>  };<br>  useEffect(() =&gt; {<br>    fetchData();<br>  }, []);</pre>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/827/1*VUyg6Wx4YC96jGNSosaXQg.png"></figure><p>Evet! Artık istediğimiz hesabın makalelerini çekebiliyoruz. Dönen veriyi incelersek, şu bilgilerle karşılaşıyoruz:</p>\n<ol>\n<li>title: Makalenin başlığı.</li>\n<li>pubDate: Yayınlanma tarihi.</li>\n<li>link: Makalenin linki.</li>\n<li>guid: Yine makaleye yönlendiren bir link.</li>\n<li>thumbnail: Makalenin ana fotoğrafı.</li>\n<li>description: Makalenin özeti.</li>\n<li>content: Makalenin tüm içeriği.</li>\n<li>enclosure: Makaleye eklenmiş dosyalar.</li>\n<li>categories: Makalenin ilgili kategorileri.</li>\n</ol>\n<p>Bundan sonra sadece dönen veriyi uygulamamıza eklemek kaldı. Artık uygulamanızda Medium yazılarını göstererek kullanıcılarınıza daha zengin bir içerik sunabilirsiniz. Medium API entegrasyonu, blog sayfanız, kişisel web siteniz veya haber uygulamalarınız için güzel bir ekleme olabilir.</p>\n<p>Bir sonraki yazımda daha farklı konularla sizlerle olacağım. Yeni bilgiler ve ipuçları için takipte kalın. Görüşmek üzere, hoşça kalın!</p>\n<img src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=77c745d3ba8b" width="1" height="1" alt="">\n',
        content:
          '\n<p>Merhaba değerli okurlar, bu yazımda React uygulamalarınızda Medium yazılarını nasıl entegre edebileceğinizi göstereceğim.</p>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*KHGSj0HJqNd8Flk85PWAXw.jpeg"></figure><h3>API Endpoint</h3>\n<p>Öncelikle, istek atacağımız endpoint’in sonuna hangi hesabın makalelerini çekmek istiyorsak o kullanıcı adını yazıyoruz:</p>\n<pre>  https://api.rss2json.com/v1/api.json?rss_url=https://medium.com/feed/@your-user-name</pre>\n<p>Daha sonra, fetch isteği yapacağımız fonksiyonu yazıyoruz:</p>\n<pre>const endpoint =<br>  "https://api.rss2json.com/v1/api.json?rss_url=https://medium.com/feed/@your-user-name";<br>export const readArticles = async () =&gt; {<br>  const response = await fetch(endpoint);<br>  if (!response.ok) {<br>    throw new Error("Error");<br>  }<br>  const result = await response.json();<br>  return result;<br>};</pre>\n<p>Son olarak, bu fonksiyondan dönen bilgileri bir state’e atıp inceleyelim:</p>\n<pre>  const [articles, setArticles] = useState([]);<br>  const fetchData = async () =&gt; {<br>    const result = await readArticles();<br>    setArticles(result.items);<br>  };<br>  useEffect(() =&gt; {<br>    fetchData();<br>  }, []);</pre>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/827/1*VUyg6Wx4YC96jGNSosaXQg.png"></figure><p>Evet! Artık istediğimiz hesabın makalelerini çekebiliyoruz. Dönen veriyi incelersek, şu bilgilerle karşılaşıyoruz:</p>\n<ol>\n<li>title: Makalenin başlığı.</li>\n<li>pubDate: Yayınlanma tarihi.</li>\n<li>link: Makalenin linki.</li>\n<li>guid: Yine makaleye yönlendiren bir link.</li>\n<li>thumbnail: Makalenin ana fotoğrafı.</li>\n<li>description: Makalenin özeti.</li>\n<li>content: Makalenin tüm içeriği.</li>\n<li>enclosure: Makaleye eklenmiş dosyalar.</li>\n<li>categories: Makalenin ilgili kategorileri.</li>\n</ol>\n<p>Bundan sonra sadece dönen veriyi uygulamamıza eklemek kaldı. Artık uygulamanızda Medium yazılarını göstererek kullanıcılarınıza daha zengin bir içerik sunabilirsiniz. Medium API entegrasyonu, blog sayfanız, kişisel web siteniz veya haber uygulamalarınız için güzel bir ekleme olabilir.</p>\n<p>Bir sonraki yazımda daha farklı konularla sizlerle olacağım. Yeni bilgiler ve ipuçları için takipte kalın. Görüşmek üzere, hoşça kalın!</p>\n<img src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=77c745d3ba8b" width="1" height="1" alt="">\n',
        enclosure: {},
        categories: ["api", "react", "fetch-api", "medium", "medium-api"],
      },
      {
        title: "Javascript Scope Türleri, Lexical Scope ve Closure",
        pubDate: "2024-05-24 10:28:27",
        link: "https://akkologlu.medium.com/javascript-scope-t%C3%BCrleri-lexical-scope-ve-closure-81774a4e869c?source=rss-aeb260affefe------2",
        guid: "https://medium.com/p/81774a4e869c",
        author: "Abdullah Akkoloğlu",
        thumbnail: "",
        description:
          '\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*yAKViZlDz930SnkX4aONAg.jpeg"></figure><p>Merhaba değerli okurlar. Javascript öğrenme sürecimde edindiğim bilgileri sizlere aktarmaya devam ediyorum. Bu yazımda javascript’teki scope türleri ve closure kavramı hakkında bilgiler vereceğim.</p>\n<p>Javascript esnek bir dil olmasının yanı sıra, kod yazarken scope yönetimi konusunda önemli kurallara sahiptir. Bu kurallar tanımlanan değişkenlerin nerelerden erişilebileceğini belirler.</p>\n<h3>Global Scope</h3>\n<p>Javascriptte bir değişken ya da fonksiyon herhangi bir fonksiyonun veya bloğun dışında tanımlandığında global scope’ta tanımlanmış olur. Bu değişkenlere ve fonksiyonlara kodun her yerinden erişilebilir.</p>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*Hg6gvEe2pN7e-_-EobnurA.png"></figure><h3>Function Scope</h3>\n<p>Bir değişken fonksiyon içinde tanımlandığı zaman bu değişken artık fonksiyon scope’undadır ve yalnızca tanımlandığı fonksiyon içinden erişilebilir. Dışarıdan erişilemez.</p>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*ipK0OPEN6QD1FfNV1z--nw.png"></figure><h3>Block Scope</h3>\n<p>ES6 ile gelen let ve const anahtar kelimeleri block scope’u destekler. Bu, değişkenlerin yalnızca tanımlandıkları blok (if, while, for, switch, …) içinden erişilebilir olduğu anlamına gelir.</p>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*zeM6uBICXHUUiXs2MnMC4g.png"></figure><p>Yukarıdaki örnekte de görüldüğü gibi var değişkeni için bu durum geçerli değil. Ancak let ve const değişkenlerine blok dışından erişemiyoruz. Bu sebeple let ve const block scope iken var için function scope değişkeni diyebiliriz.</p>\n<h3>Lexical Scope</h3>\n<p>Lexical scope Javascript değişkenlerinin ve fonksiyonlarının tanımlandıkları yerdeki değişkenlere erişmesi anlamına geliyor. Aşağıdaki örnekte showVariable fonksiyonu printVariable fonksiyonunun içinde çağırılmıştır ve çağırılmadan hemen önce variable değişkeni tanımlanmıştır. Burada çıktı olarak “Ben iç scope’tayım” sonucunu bekleyebilirsiniz ancak biraz önce belirttiğim gibi fonksiyonun çağırıldığı yer değil tanımlandığı bloktaki değişkenlere erişimi var. Ve bu durumda çıktı olarak ilk satırdaki “Ben dış scope’tayım” sonucunu alıyoruz. Bu lexical scope’un bir sonucudur.</p>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/926/1*ts_iwueVdK-GQPkL75R2GA.png"></figure><h3>Closure</h3>\n<p>Closure, bir fonksiyonun başka bir fonksiyon içinde tanımlanması ve bu iç fonksiyonun dış fonksiyonun kapsamındaki değişkenlere erişebilmesi ile oluşur. Dış fonksiyonun çalışması bittikten sonra bile, iç fonksiyon bu değişkenlere erişmeye devam edebilir. Ve buna closure denir.</p>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*-NXBFo6L7TcDpHFnW5kVNg.png"></figure><p>Bu örnekte outerFunction, innerFunction’ı return eder ve myFunction değişkenine atanır. outerVariable değişkeni, outerFunction çalışmayı bitirdikten sonra bile, myFunction tarafından erişilebilir durumda kalır. İşte bu closure\'dır.</p>\n<p>Closure’un gücünü anlayabilmek için farklı bir örneğe bakalım:</p>\n<p>Aşağıdaki örnekte banka hesabımızda bakiye olarak 30 dolarımız olduğunu varsayalım. İç fonksiyonda da deposit ile yatırmak istediğimiz para miktarı ile birlikte bakiyemizi arttırabiliyoruz. Ve son olarak bakiyemizi return ediyoruz. Bu fonksiyonu üç kez üst üste çağırdığımızda bakiyemizin sürekli artmasını bekleyebilirsiniz ancak öyle olmuyor. Çünkü fonksiyon her çağırıldığında balance değişkeni tekrardan 30 sayısına eşitleniyor ve sürekli 40 olarak geri dönüyor. İşte bu durumu değiştirmek için closure’dan faydalanabiliriz.</p>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/818/1*RlAku5DhQndXBeqh0x4g3w.png"></figure><p>Aşağıdaki örnekte ise bankAccount fonksiyonu myAccount değişkenine atanıyor ve o anda bir kez çalışıp işi bitiyor. Return ettiği deposit fonksiyonu da bu şekilde myAccount değişkeni tarafından erişilmiş oluyor. deposit fonksiyonu kendi lexical scope’undaki balance değişkenine erişebildiği için onu değiştirebiliyor. bankAccount fonksiyonu tekrardan çağırılmadığı için balance değişkeni tekrar tekrar 30 sayısına eşitlenmiyor ve bakiye artışı sağlanmış oluyor. İşte bu durum closure ile beraber gerçekleşiyor.</p>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/848/1*cinvkto4unUui-z_HwFulQ.png"></figure><p>Scope ve closure kavramlarını sade ve basit bir şekilde açıklamaya çalıştım. Javascriptin derin ve eğlenceli dünyası hakkında yazmaya devam edeceğim. Daha sonraki yazılarımda görüşmek üzere. 👋</p>\n<img src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=81774a4e869c" width="1" height="1" alt="">\n',
        content:
          '\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*yAKViZlDz930SnkX4aONAg.jpeg"></figure><p>Merhaba değerli okurlar. Javascript öğrenme sürecimde edindiğim bilgileri sizlere aktarmaya devam ediyorum. Bu yazımda javascript’teki scope türleri ve closure kavramı hakkında bilgiler vereceğim.</p>\n<p>Javascript esnek bir dil olmasının yanı sıra, kod yazarken scope yönetimi konusunda önemli kurallara sahiptir. Bu kurallar tanımlanan değişkenlerin nerelerden erişilebileceğini belirler.</p>\n<h3>Global Scope</h3>\n<p>Javascriptte bir değişken ya da fonksiyon herhangi bir fonksiyonun veya bloğun dışında tanımlandığında global scope’ta tanımlanmış olur. Bu değişkenlere ve fonksiyonlara kodun her yerinden erişilebilir.</p>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*Hg6gvEe2pN7e-_-EobnurA.png"></figure><h3>Function Scope</h3>\n<p>Bir değişken fonksiyon içinde tanımlandığı zaman bu değişken artık fonksiyon scope’undadır ve yalnızca tanımlandığı fonksiyon içinden erişilebilir. Dışarıdan erişilemez.</p>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*ipK0OPEN6QD1FfNV1z--nw.png"></figure><h3>Block Scope</h3>\n<p>ES6 ile gelen let ve const anahtar kelimeleri block scope’u destekler. Bu, değişkenlerin yalnızca tanımlandıkları blok (if, while, for, switch, …) içinden erişilebilir olduğu anlamına gelir.</p>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*zeM6uBICXHUUiXs2MnMC4g.png"></figure><p>Yukarıdaki örnekte de görüldüğü gibi var değişkeni için bu durum geçerli değil. Ancak let ve const değişkenlerine blok dışından erişemiyoruz. Bu sebeple let ve const block scope iken var için function scope değişkeni diyebiliriz.</p>\n<h3>Lexical Scope</h3>\n<p>Lexical scope Javascript değişkenlerinin ve fonksiyonlarının tanımlandıkları yerdeki değişkenlere erişmesi anlamına geliyor. Aşağıdaki örnekte showVariable fonksiyonu printVariable fonksiyonunun içinde çağırılmıştır ve çağırılmadan hemen önce variable değişkeni tanımlanmıştır. Burada çıktı olarak “Ben iç scope’tayım” sonucunu bekleyebilirsiniz ancak biraz önce belirttiğim gibi fonksiyonun çağırıldığı yer değil tanımlandığı bloktaki değişkenlere erişimi var. Ve bu durumda çıktı olarak ilk satırdaki “Ben dış scope’tayım” sonucunu alıyoruz. Bu lexical scope’un bir sonucudur.</p>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/926/1*ts_iwueVdK-GQPkL75R2GA.png"></figure><h3>Closure</h3>\n<p>Closure, bir fonksiyonun başka bir fonksiyon içinde tanımlanması ve bu iç fonksiyonun dış fonksiyonun kapsamındaki değişkenlere erişebilmesi ile oluşur. Dış fonksiyonun çalışması bittikten sonra bile, iç fonksiyon bu değişkenlere erişmeye devam edebilir. Ve buna closure denir.</p>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*-NXBFo6L7TcDpHFnW5kVNg.png"></figure><p>Bu örnekte outerFunction, innerFunction’ı return eder ve myFunction değişkenine atanır. outerVariable değişkeni, outerFunction çalışmayı bitirdikten sonra bile, myFunction tarafından erişilebilir durumda kalır. İşte bu closure\'dır.</p>\n<p>Closure’un gücünü anlayabilmek için farklı bir örneğe bakalım:</p>\n<p>Aşağıdaki örnekte banka hesabımızda bakiye olarak 30 dolarımız olduğunu varsayalım. İç fonksiyonda da deposit ile yatırmak istediğimiz para miktarı ile birlikte bakiyemizi arttırabiliyoruz. Ve son olarak bakiyemizi return ediyoruz. Bu fonksiyonu üç kez üst üste çağırdığımızda bakiyemizin sürekli artmasını bekleyebilirsiniz ancak öyle olmuyor. Çünkü fonksiyon her çağırıldığında balance değişkeni tekrardan 30 sayısına eşitleniyor ve sürekli 40 olarak geri dönüyor. İşte bu durumu değiştirmek için closure’dan faydalanabiliriz.</p>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/818/1*RlAku5DhQndXBeqh0x4g3w.png"></figure><p>Aşağıdaki örnekte ise bankAccount fonksiyonu myAccount değişkenine atanıyor ve o anda bir kez çalışıp işi bitiyor. Return ettiği deposit fonksiyonu da bu şekilde myAccount değişkeni tarafından erişilmiş oluyor. deposit fonksiyonu kendi lexical scope’undaki balance değişkenine erişebildiği için onu değiştirebiliyor. bankAccount fonksiyonu tekrardan çağırılmadığı için balance değişkeni tekrar tekrar 30 sayısına eşitlenmiyor ve bakiye artışı sağlanmış oluyor. İşte bu durum closure ile beraber gerçekleşiyor.</p>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/848/1*cinvkto4unUui-z_HwFulQ.png"></figure><p>Scope ve closure kavramlarını sade ve basit bir şekilde açıklamaya çalıştım. Javascriptin derin ve eğlenceli dünyası hakkında yazmaya devam edeceğim. Daha sonraki yazılarımda görüşmek üzere. 👋</p>\n<img src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=81774a4e869c" width="1" height="1" alt="">\n',
        enclosure: {},
        categories: [
          "front-end-development",
          "lexical-scope",
          "javascript",
          "scopes",
          "closure",
        ],
      },
      {
        title: "NPM Paketi Nasıl Yayınlanır?",
        pubDate: "2024-04-29 14:24:41",
        link: "https://akkologlu.medium.com/npm-paketi-nas%C4%B1l-yay%C4%B1nlan%C4%B1r-8a87bb9a392d?source=rss-aeb260affefe------2",
        guid: "https://medium.com/p/8a87bb9a392d",
        author: "Abdullah Akkoloğlu",
        thumbnail: "",
        description:
          '\n<p>Merhaba dostlar, bu yazımda bir npm paketi oluşturup bunun npmjs.com sitesinde nasıl yayınlanacağını adım adım ve basit bir örnekle anlatmak istiyorum.</p>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*M45JBaJoTKluCMd4D8aEEg.png"></figure><p>Öncelikle npm projemizi tutacağımız bir GitHub reposu açıyoruz. Bu adım zorunlu değil ancak npm paketlerinin bağlı olduğu bir GitHub sayfasının olması, açık kaynak olan bu paketlerin topluluk tarafından desteklenmesi ve geliştirilmeye açık olması anlamına geliyor. Bundan dolayı bir public GitHub reposu oluşturuyoruz. Oluşturduğum reponun linki: <a href="https://github.com/akkologlu/scss-mixins-helper">https://github.com/akkologlu/scss-mixins-helper</a></p>\n<p>Benim bu yazıda kullanacağım örnek, SCSS için hazır mixinlerin olduğu küçük bir UI kütüphanesi olacak.</p>\n<p>Oluşturduğumuz repoyu uygun bir yere klonluyoruz.</p>\n<pre>git clone https://github.com/akkologlu/scss-mixins-helper</pre>\n<p>Daha sonra bu dosyanın dizininde iken npm init komutu ile npm projemizi kurmalıyız. Bu komutu çalıştırdığımızda bize bazı sorular sorulacak:</p>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/580/1*mKB31C5Eh-WzU7PIIjUEHA.png"></figure><p>Öncelikle package name kısmı için npmjs.com adresine gidip aynı isimde bir paket olup olmadığına bakmanız gerekiyor. Bu kontrolden sonra paketinize isim verebilirsiniz. Description kısmına paketiniz için bir açıklama yazdıktan sonra git repository bölümüne oluşturduğunuz GitHub reposunun linkini yapıştırabilirsiniz. Author kısmına kendi isminizi ve license kısmına da bir lisans ismi verdikten sonra package.json dosyamız hazır oluyor.</p>\n<p>Bu örnekte SASS üzerinde bir geliştirme yaptığım için SASS kütüphanesini de yüklemem gerekiyor. npm install sass</p>\n<p>Evet bu aşamalardan sonra artık package.json dosyamız bu şekilde gözüküyor:</p>\n<pre>{<br>  "name": "scss-mixins-helper",<br>  "version": "1.0.0",<br>  "description": "Contains some reusable scss mixin parts.",<br>  "main": "index.js",<br>  "scripts": {<br>    "test": "echo \\"Error: no test specified\\" &amp;&amp; exit 1"<br>  },<br>  "repository": {<br>    "type": "git",<br>    "url": "git+https://github.com/akkologlu/scss-mixins-helper.git"<br>  },<br>  "keywords": [<br>    "sass",<br>    "scss",<br>    "ui",<br>    "frontend",<br>    "mixin"<br>  ],<br>  "author": "akkologlu",<br>  "license": "MIT",<br>  "bugs": {<br>    "url": "https://github.com/akkologlu/scss-mixins-helper/issues"<br>  },<br>  "homepage": "https://github.com/akkologlu/scss-mixins-helper#readme",<br>  "dependencies": {<br>    "sass": "^1.75.0"<br>  }<br>}</pre>\n<p>Daha sonra projemizde bir src dosyası oluşturuyoruz. Bu dosya bizim scss dosyalarımızın bulunacağı klasör olacak. Bu klasörün içine ilk scss dosyamı açıyorum: mixins.scss Ve içine ilk mixin parçasını yazıyorum. Bu örnekte bir button stillendiricisi kullanmak istedim.</p>\n<pre>src/mixins.scss<br><br>@mixin button($bg-color, $text-color) {<br>  background-color: $bg-color;<br>  color: $text-color;<br>  padding: 10px 20px;<br>  border: none;<br>  border-radius: 5px;<br>  cursor: pointer;<br>  &amp;:hover {<br>    opacity: 0.8;<br>  }<br>}</pre>\n<p>Bu dosyayı kaydettikten sonra isterseniz yayınlamadan önce test dosyaları ile yazdığınız kod parçalarını test edebilirsiniz.</p>\n<p>Evet ilk mixin parçasını da ekledikten sonra package.json dosyasına dönüyoruz ve “main” : kısmına bu mixins.scss dosyasını ekliyoruz. Bu main bölümü paketimiz yayınlandığı zaman kullanıcıların hangi dosyaya erişmesi gerektiğini gösteriyor.</p>\n<pre>"main": "src/mixins.scss",</pre>\n<p>Bu adımı da tamamladıktan sonra paketimiz artık yayınlanmaya hazır. Yayınlamak için ana dizinde iken npm login komutunu yazıyoruz ve terminalden npmjs.com sitesine giriş yapmamız için bize bir link veriliyor.</p>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/730/1*YChSK8itbn5mP6IWIup7Ew.png"></figure><p>Bu linke tıklayıp giriş yaptıktan sonra artık son adım olan npm publish komutu ile paketimizi yayınlıyoruz.</p>\n<p>Yayınladığımız paketi, verdiğimiz isim ile npmjs.com sitesinde veya terminalde bize dönen bilgilerle bulabiliriz.</p>\n<p><a href="https://www.npmjs.com/package/scss-mixins-helper">scss-mixins-helper</a></p>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*7q-K0MU-xyjBO21JvlBFsA.png"></figure><h3>Nasıl Kullanacağız ?</h3>\n<p>Örnek kullanım için yeni bir proje açıyorum ve HTML, SCSS dosyalarımı hazırlıyorum. Ve html dosyama bir button ekliyorum. button , HTML’in varsayılan stilinde geliyor.</p>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/455/1*4KxET_QEX4UBnNtymp75vg.png"></figure><p>Şimdi sıra biraz önce yayınladığımız paketi yüklemekte. Bunun için paketin npmjs sayfasına gidiyoruz ve yükleme kısmını kopyalıyoruz.</p>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/386/1*n5SZ9n6eoA63k_-FDfFZcw.png"></figure><p>Bu komutu terminalde yapıştırıyoruz ve package.json\'daki dependencies kısmına geldiğinden emin oluyoruz.</p>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/258/1*UYNRmDXQpMal7XbgR_2esg.png"></figure><p>Yüklediğimiz paketimizi SCSS dosyamıza import ettikten sonra artık içinde bulunan mixin’i kullanabiliriz.</p>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/486/1*_SwOtG9atnx_0jtJAKDwLg.png"></figure><p>Ve butonumuzu stilinin değiştiğini görebiliyoruz.</p>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/356/1*vnKa28LlZx3xU3AkwjTRsQ.png"></figure><p>Basit ve kısa bir örnekle npm paketi yayınlamayı göstermiş oldum. Bu pakete readme.md dosyası da ekleyerek npm sayfasının daha açıklayacı ve güzel durmasını sağlayabilirsiniz. Bu bir UI örneğiydi ancak bu paketleri istediğiniz alanda yayınlayıp insanların kullanımına sunabilirsiniz. Daha sonraki yazılarımda görüşmek üzere, hoşça kalın!</p>\n<img src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=8a87bb9a392d" width="1" height="1" alt="">\n',
        content:
          '\n<p>Merhaba dostlar, bu yazımda bir npm paketi oluşturup bunun npmjs.com sitesinde nasıl yayınlanacağını adım adım ve basit bir örnekle anlatmak istiyorum.</p>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*M45JBaJoTKluCMd4D8aEEg.png"></figure><p>Öncelikle npm projemizi tutacağımız bir GitHub reposu açıyoruz. Bu adım zorunlu değil ancak npm paketlerinin bağlı olduğu bir GitHub sayfasının olması, açık kaynak olan bu paketlerin topluluk tarafından desteklenmesi ve geliştirilmeye açık olması anlamına geliyor. Bundan dolayı bir public GitHub reposu oluşturuyoruz. Oluşturduğum reponun linki: <a href="https://github.com/akkologlu/scss-mixins-helper">https://github.com/akkologlu/scss-mixins-helper</a></p>\n<p>Benim bu yazıda kullanacağım örnek, SCSS için hazır mixinlerin olduğu küçük bir UI kütüphanesi olacak.</p>\n<p>Oluşturduğumuz repoyu uygun bir yere klonluyoruz.</p>\n<pre>git clone https://github.com/akkologlu/scss-mixins-helper</pre>\n<p>Daha sonra bu dosyanın dizininde iken npm init komutu ile npm projemizi kurmalıyız. Bu komutu çalıştırdığımızda bize bazı sorular sorulacak:</p>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/580/1*mKB31C5Eh-WzU7PIIjUEHA.png"></figure><p>Öncelikle package name kısmı için npmjs.com adresine gidip aynı isimde bir paket olup olmadığına bakmanız gerekiyor. Bu kontrolden sonra paketinize isim verebilirsiniz. Description kısmına paketiniz için bir açıklama yazdıktan sonra git repository bölümüne oluşturduğunuz GitHub reposunun linkini yapıştırabilirsiniz. Author kısmına kendi isminizi ve license kısmına da bir lisans ismi verdikten sonra package.json dosyamız hazır oluyor.</p>\n<p>Bu örnekte SASS üzerinde bir geliştirme yaptığım için SASS kütüphanesini de yüklemem gerekiyor. npm install sass</p>\n<p>Evet bu aşamalardan sonra artık package.json dosyamız bu şekilde gözüküyor:</p>\n<pre>{<br>  "name": "scss-mixins-helper",<br>  "version": "1.0.0",<br>  "description": "Contains some reusable scss mixin parts.",<br>  "main": "index.js",<br>  "scripts": {<br>    "test": "echo \\"Error: no test specified\\" &amp;&amp; exit 1"<br>  },<br>  "repository": {<br>    "type": "git",<br>    "url": "git+https://github.com/akkologlu/scss-mixins-helper.git"<br>  },<br>  "keywords": [<br>    "sass",<br>    "scss",<br>    "ui",<br>    "frontend",<br>    "mixin"<br>  ],<br>  "author": "akkologlu",<br>  "license": "MIT",<br>  "bugs": {<br>    "url": "https://github.com/akkologlu/scss-mixins-helper/issues"<br>  },<br>  "homepage": "https://github.com/akkologlu/scss-mixins-helper#readme",<br>  "dependencies": {<br>    "sass": "^1.75.0"<br>  }<br>}</pre>\n<p>Daha sonra projemizde bir src dosyası oluşturuyoruz. Bu dosya bizim scss dosyalarımızın bulunacağı klasör olacak. Bu klasörün içine ilk scss dosyamı açıyorum: mixins.scss Ve içine ilk mixin parçasını yazıyorum. Bu örnekte bir button stillendiricisi kullanmak istedim.</p>\n<pre>src/mixins.scss<br><br>@mixin button($bg-color, $text-color) {<br>  background-color: $bg-color;<br>  color: $text-color;<br>  padding: 10px 20px;<br>  border: none;<br>  border-radius: 5px;<br>  cursor: pointer;<br>  &amp;:hover {<br>    opacity: 0.8;<br>  }<br>}</pre>\n<p>Bu dosyayı kaydettikten sonra isterseniz yayınlamadan önce test dosyaları ile yazdığınız kod parçalarını test edebilirsiniz.</p>\n<p>Evet ilk mixin parçasını da ekledikten sonra package.json dosyasına dönüyoruz ve “main” : kısmına bu mixins.scss dosyasını ekliyoruz. Bu main bölümü paketimiz yayınlandığı zaman kullanıcıların hangi dosyaya erişmesi gerektiğini gösteriyor.</p>\n<pre>"main": "src/mixins.scss",</pre>\n<p>Bu adımı da tamamladıktan sonra paketimiz artık yayınlanmaya hazır. Yayınlamak için ana dizinde iken npm login komutunu yazıyoruz ve terminalden npmjs.com sitesine giriş yapmamız için bize bir link veriliyor.</p>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/730/1*YChSK8itbn5mP6IWIup7Ew.png"></figure><p>Bu linke tıklayıp giriş yaptıktan sonra artık son adım olan npm publish komutu ile paketimizi yayınlıyoruz.</p>\n<p>Yayınladığımız paketi, verdiğimiz isim ile npmjs.com sitesinde veya terminalde bize dönen bilgilerle bulabiliriz.</p>\n<p><a href="https://www.npmjs.com/package/scss-mixins-helper">scss-mixins-helper</a></p>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*7q-K0MU-xyjBO21JvlBFsA.png"></figure><h3>Nasıl Kullanacağız ?</h3>\n<p>Örnek kullanım için yeni bir proje açıyorum ve HTML, SCSS dosyalarımı hazırlıyorum. Ve html dosyama bir button ekliyorum. button , HTML’in varsayılan stilinde geliyor.</p>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/455/1*4KxET_QEX4UBnNtymp75vg.png"></figure><p>Şimdi sıra biraz önce yayınladığımız paketi yüklemekte. Bunun için paketin npmjs sayfasına gidiyoruz ve yükleme kısmını kopyalıyoruz.</p>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/386/1*n5SZ9n6eoA63k_-FDfFZcw.png"></figure><p>Bu komutu terminalde yapıştırıyoruz ve package.json\'daki dependencies kısmına geldiğinden emin oluyoruz.</p>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/258/1*UYNRmDXQpMal7XbgR_2esg.png"></figure><p>Yüklediğimiz paketimizi SCSS dosyamıza import ettikten sonra artık içinde bulunan mixin’i kullanabiliriz.</p>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/486/1*_SwOtG9atnx_0jtJAKDwLg.png"></figure><p>Ve butonumuzu stilinin değiştiğini görebiliyoruz.</p>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/356/1*vnKa28LlZx3xU3AkwjTRsQ.png"></figure><p>Basit ve kısa bir örnekle npm paketi yayınlamayı göstermiş oldum. Bu pakete readme.md dosyası da ekleyerek npm sayfasının daha açıklayacı ve güzel durmasını sağlayabilirsiniz. Bu bir UI örneğiydi ancak bu paketleri istediğiniz alanda yayınlayıp insanların kullanımına sunabilirsiniz. Daha sonraki yazılarımda görüşmek üzere, hoşça kalın!</p>\n<img src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=8a87bb9a392d" width="1" height="1" alt="">\n',
        enclosure: {},
        categories: ["scss", "front-end-development", "css", "sass", "npm"],
      },
      {
        title: "Turkcell Bootcamp’te İlk Ayım",
        pubDate: "2024-04-26 18:25:05",
        link: "https://akkologlu.medium.com/turkcell-bootcampte-i%CC%87lk-ay%C4%B1m-eed3742cf84d?source=rss-aeb260affefe------2",
        guid: "https://medium.com/p/eed3742cf84d",
        author: "Abdullah Akkoloğlu",
        thumbnail: "",
        description:
          '\n<p>Merhaba dostlar! Büyük bir heyecanla ve mutlulukla dahil olduğum “Gençlere Yatırım, Geleceğe Yazılım Front-End Programlama Bootcamp” programının ilk ayını geride bıraktım ve bu süreçte neler yaşadığımı paylaşmak istiyorum.</p>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*BO1AczoYUIDkLZMZ9jXGWQ.png"></figure><h3>Bootcamp Öncesi Süreç</h3>\n<p>Turkcell her sene farklı alanlarda düzenlediği bu programı çeşitli sosyal mecralarda paylaşıyor. Yoğun bir başvuru süreci ardından ön incelemeyi geçen adaylara teknik test gönderiliyor. Bu teknik test, başvuru yaptığınız alana göre hazırlanan sorulardan oluşuyor. Bu testi de gönderdikten sonra artık son aşama olan İK mülakatı aşamasına geçiyorsunuz. Bu aşamaya geçtiğimin haberini, mülakatıma girecek olan İK çalışanı tarafından cep telefonumdan aranarak aldım ve artık son bir aşama kaldığı için heyecanla mülakat saatini beklemeye başladım. Mülakat yaklaşık yarım saat sürdü ve güzel geçen karşılıklı sohbet ile aslında bu yarım saatin nasıl geçtiğini anlamadım. Artık İK mülakatımın da iyi geçtiğini ve programa kabul alma ihtimalimin arttığını hissedebiliyordum. Bu şekilde yaklaşık 15 gün bekledikten sonra Turkcell Geleceği Yazanlar ekibinden son bir mail daha aldım :)</p>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/950/1*1uzzQCFZAF7q_YixJtLpcg.jpeg"></figure><p>İlk olarak, Bootcamp’e başlamadan önce kafamda bazı sorular vardı. Nasıl bir ders ortamı olacaktı? Ne tarz projeler yapacaktık? Bu projelerin seviyeleri ne olacaktı? Takım çalışmaları nasıl olacaktı? Bu soruların tamamına daha ilk haftada eğitmenimiz <a href="https://medium.com/u/1aeb371db21c">Varol Maksutoğlu</a> ile birlikte cevaplar bulmuş oldum.</p>\n<h3>Dersler</h3>\n<p>Eğitimin ilk ayı güzel bir tempoda ilerledi. Haftada üç gün üçer saatlik bir ders programımız var ve ben bu yazıyı yazarken on beşinci dersimizi de bitirmiş bulunuyoruz. Bu süreçte HTML, CSS gibi temel konuları kapsayan dersler ve SASS, SCSS ve Bootstrap gibi UI teknolojilerini öğrendik. Şu ana kadar ki derslerimizin birçoğu genelde belirli bir düzende geçti:</p>\n<ul>\n<li>Dersin ilk saati önceki dersten verilen ödevlerin sunumları yapılıyor ve takıldığımız yerlere bakıyoruz; bir yanda da aslında sınıfça sohbet etmiş oluyoruz.</li>\n<li>Dersin ikinci saatinde ise yeni bir konuya başlıyoruz ve o dersi hocamızı dinleyerek ve notlar alarak geçiriyoruz. Bu sırada aklımıza gelen soruları da sorma fırsatımız oluyor.</li>\n<li>Ve dersin son saatinde tamamen rastgele olarak üçlü takımlara ayrılıyoruz ve o dersin ödevi için planlamamızı yapmaya başlıyoruz.</li>\n</ul>\n<h3>Takım Çalışması</h3>\n<p>Bootcamp’in şu ana kadar bana kattığı en faydalı deneyimlerden birisi kesinlikle takım olarak çalışmak. Birbirinden farklı alanlardan birçok farklı yeteneğe sahip takım arkadaşlarıyla buluşmanın ve onlarla proje yapmanın ne kadar verimli olduğunu gördüm. Birbirimizin güçlü yönlerinden faydalanarak, projelerimizi daha etkili bir şekilde tamamladık ve birbirimize destek olmanın önemini kavramış olduk. Bu süreçte nasıl ortak kararlar verebileceğimizi, eş zamanlı bir şekilde nasıl çalışabileceğimizi ve fikir ayrılığı olduğu zaman bunları nasıl çözeceğimizi de öğrenmiş olduk. Bu deneyimlerin iş hayatına bizi hazırladığını ve iş hayatında da bu şekilde çalışmamız gerektiğini öğrendik.</p>\n<h3>Eğitmenimiz Varol Bey</h3>\n<p>Varol hocamız çeşitli platformlarda verdiği eğitimlerle ismini yazılım eğitimi sektöründe duyurmuş bir eğitmen. Aynı zamanda şu anda Atmosware Frontend Takımına da takım liderliği yapıyor. Ve Turkcell’in bu programının geçmiş senelerinde de yine eğitmenliği kendisi yapmış. Aslında şu anda verdiği eğitimde kendisiyle birlikte çalışacak olan çalışma arkadaşlarını seçiyor diyebiliriz. Varol hocanın önce kısa bir teorik ders verip daha sonra uzun bir pratik ders yapmak gibi bir tarzı var. Bu tarzın pratik kısmını takımlar halinde yaptırması da aslında yukarıda da bahsettiğim gibi öğrencilerin sadece kendisinden bir şeyler öğrenmesi değil birbirlerinden de bir şeyler öğrenebilmesini amaçlıyor. Bu eğitim tarzının ne kadar faydalı olduğunu programdaki tüm arkadaşlar farkında. Bu tarzda ve seviyede eğitimin sadece böyle bootcamplerde alınabileceğini ve online kurslarda böyle bir fırsatın olmadığını hepimiz biliyoruz.</p>\n<h3>Mentörlük</h3>\n<p>Her bir öğrencinin program boyunca onun takibini yapacağı mentörleri oluyor. Her hafta birebir toplantılar yapılıyor ve ihtiyacınızın olduğu her an da onlara ulaşıp aklınıza takılan soruları onlara sorabiliyorsunuz. Mentörlerden bazıları geçmiş bootcamplerden başarılı bir şekilde mezun olup Turkcell’de istihdam edilmiş kişiler oluyor. Bu anlamda da bizim şu anda yürüdüğümüz yolu onların daha önce deneyimlemiş olmaları, bootcamp öğrencisine gerçekten çok şey katıyor. Mentörlük tamamen süreçte öğrencinin nasıl çalışması, nasıl planlama yapması gibi alanlarda yardımcı olması üzerine kurulu. Takıldığınız teknik kısımlarda da yardımcı oluyorlar. Ancak puan verilecek önemli ödevlerde kod kısmına müdahele edemiyorlar. Benim mentörüm de yine geçen senenin mezunlarından Büşra Hanım oldu. Mentörüm <a href="https://medium.com/u/a93121644ad0">Büşra Kosnak</a>’a bu vesileyle teşekkür ederim.</p>\n<p>Şimdi, Bootcamp’in ikinci ayına başlarken, heyecanım daha da artmış durumda. İlk ayın getirdiği güven ve deneyimle, yeni konuları öğrenmeye ve daha karmaşık projelerle uğraşmaya hazırım. Bu bootcamp, benim için sadece bir eğitim programı olmaktan öte, bir topluluk ve bir aile haline geldi. Birlikte öğrenmek ve birbirimize destek olmak benim için mükemmel bir deneyim oldu ve olmaya devam ediyor.</p>\n<p>Sonuç olarak, bootcampin ilk ayı benim için gerçekten harika geçti. Kendimi geliştirmenin yanı sıra, yeni insanlarla tanıştım, yeni beceriler kazandım ve kariyerimdeki bir sonraki adıma hazırlık yapma fırsatı buldum. Bu deneyimi yaşamaktan dolayı çok şanslı hissediyorum ve gelecekte neler getireceğini heyecanla bekliyorum!</p>\n<img src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=eed3742cf84d" width="1" height="1" alt="">\n',
        content:
          '\n<p>Merhaba dostlar! Büyük bir heyecanla ve mutlulukla dahil olduğum “Gençlere Yatırım, Geleceğe Yazılım Front-End Programlama Bootcamp” programının ilk ayını geride bıraktım ve bu süreçte neler yaşadığımı paylaşmak istiyorum.</p>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*BO1AczoYUIDkLZMZ9jXGWQ.png"></figure><h3>Bootcamp Öncesi Süreç</h3>\n<p>Turkcell her sene farklı alanlarda düzenlediği bu programı çeşitli sosyal mecralarda paylaşıyor. Yoğun bir başvuru süreci ardından ön incelemeyi geçen adaylara teknik test gönderiliyor. Bu teknik test, başvuru yaptığınız alana göre hazırlanan sorulardan oluşuyor. Bu testi de gönderdikten sonra artık son aşama olan İK mülakatı aşamasına geçiyorsunuz. Bu aşamaya geçtiğimin haberini, mülakatıma girecek olan İK çalışanı tarafından cep telefonumdan aranarak aldım ve artık son bir aşama kaldığı için heyecanla mülakat saatini beklemeye başladım. Mülakat yaklaşık yarım saat sürdü ve güzel geçen karşılıklı sohbet ile aslında bu yarım saatin nasıl geçtiğini anlamadım. Artık İK mülakatımın da iyi geçtiğini ve programa kabul alma ihtimalimin arttığını hissedebiliyordum. Bu şekilde yaklaşık 15 gün bekledikten sonra Turkcell Geleceği Yazanlar ekibinden son bir mail daha aldım :)</p>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/950/1*1uzzQCFZAF7q_YixJtLpcg.jpeg"></figure><p>İlk olarak, Bootcamp’e başlamadan önce kafamda bazı sorular vardı. Nasıl bir ders ortamı olacaktı? Ne tarz projeler yapacaktık? Bu projelerin seviyeleri ne olacaktı? Takım çalışmaları nasıl olacaktı? Bu soruların tamamına daha ilk haftada eğitmenimiz <a href="https://medium.com/u/1aeb371db21c">Varol Maksutoğlu</a> ile birlikte cevaplar bulmuş oldum.</p>\n<h3>Dersler</h3>\n<p>Eğitimin ilk ayı güzel bir tempoda ilerledi. Haftada üç gün üçer saatlik bir ders programımız var ve ben bu yazıyı yazarken on beşinci dersimizi de bitirmiş bulunuyoruz. Bu süreçte HTML, CSS gibi temel konuları kapsayan dersler ve SASS, SCSS ve Bootstrap gibi UI teknolojilerini öğrendik. Şu ana kadar ki derslerimizin birçoğu genelde belirli bir düzende geçti:</p>\n<ul>\n<li>Dersin ilk saati önceki dersten verilen ödevlerin sunumları yapılıyor ve takıldığımız yerlere bakıyoruz; bir yanda da aslında sınıfça sohbet etmiş oluyoruz.</li>\n<li>Dersin ikinci saatinde ise yeni bir konuya başlıyoruz ve o dersi hocamızı dinleyerek ve notlar alarak geçiriyoruz. Bu sırada aklımıza gelen soruları da sorma fırsatımız oluyor.</li>\n<li>Ve dersin son saatinde tamamen rastgele olarak üçlü takımlara ayrılıyoruz ve o dersin ödevi için planlamamızı yapmaya başlıyoruz.</li>\n</ul>\n<h3>Takım Çalışması</h3>\n<p>Bootcamp’in şu ana kadar bana kattığı en faydalı deneyimlerden birisi kesinlikle takım olarak çalışmak. Birbirinden farklı alanlardan birçok farklı yeteneğe sahip takım arkadaşlarıyla buluşmanın ve onlarla proje yapmanın ne kadar verimli olduğunu gördüm. Birbirimizin güçlü yönlerinden faydalanarak, projelerimizi daha etkili bir şekilde tamamladık ve birbirimize destek olmanın önemini kavramış olduk. Bu süreçte nasıl ortak kararlar verebileceğimizi, eş zamanlı bir şekilde nasıl çalışabileceğimizi ve fikir ayrılığı olduğu zaman bunları nasıl çözeceğimizi de öğrenmiş olduk. Bu deneyimlerin iş hayatına bizi hazırladığını ve iş hayatında da bu şekilde çalışmamız gerektiğini öğrendik.</p>\n<h3>Eğitmenimiz Varol Bey</h3>\n<p>Varol hocamız çeşitli platformlarda verdiği eğitimlerle ismini yazılım eğitimi sektöründe duyurmuş bir eğitmen. Aynı zamanda şu anda Atmosware Frontend Takımına da takım liderliği yapıyor. Ve Turkcell’in bu programının geçmiş senelerinde de yine eğitmenliği kendisi yapmış. Aslında şu anda verdiği eğitimde kendisiyle birlikte çalışacak olan çalışma arkadaşlarını seçiyor diyebiliriz. Varol hocanın önce kısa bir teorik ders verip daha sonra uzun bir pratik ders yapmak gibi bir tarzı var. Bu tarzın pratik kısmını takımlar halinde yaptırması da aslında yukarıda da bahsettiğim gibi öğrencilerin sadece kendisinden bir şeyler öğrenmesi değil birbirlerinden de bir şeyler öğrenebilmesini amaçlıyor. Bu eğitim tarzının ne kadar faydalı olduğunu programdaki tüm arkadaşlar farkında. Bu tarzda ve seviyede eğitimin sadece böyle bootcamplerde alınabileceğini ve online kurslarda böyle bir fırsatın olmadığını hepimiz biliyoruz.</p>\n<h3>Mentörlük</h3>\n<p>Her bir öğrencinin program boyunca onun takibini yapacağı mentörleri oluyor. Her hafta birebir toplantılar yapılıyor ve ihtiyacınızın olduğu her an da onlara ulaşıp aklınıza takılan soruları onlara sorabiliyorsunuz. Mentörlerden bazıları geçmiş bootcamplerden başarılı bir şekilde mezun olup Turkcell’de istihdam edilmiş kişiler oluyor. Bu anlamda da bizim şu anda yürüdüğümüz yolu onların daha önce deneyimlemiş olmaları, bootcamp öğrencisine gerçekten çok şey katıyor. Mentörlük tamamen süreçte öğrencinin nasıl çalışması, nasıl planlama yapması gibi alanlarda yardımcı olması üzerine kurulu. Takıldığınız teknik kısımlarda da yardımcı oluyorlar. Ancak puan verilecek önemli ödevlerde kod kısmına müdahele edemiyorlar. Benim mentörüm de yine geçen senenin mezunlarından Büşra Hanım oldu. Mentörüm <a href="https://medium.com/u/a93121644ad0">Büşra Kosnak</a>’a bu vesileyle teşekkür ederim.</p>\n<p>Şimdi, Bootcamp’in ikinci ayına başlarken, heyecanım daha da artmış durumda. İlk ayın getirdiği güven ve deneyimle, yeni konuları öğrenmeye ve daha karmaşık projelerle uğraşmaya hazırım. Bu bootcamp, benim için sadece bir eğitim programı olmaktan öte, bir topluluk ve bir aile haline geldi. Birlikte öğrenmek ve birbirimize destek olmak benim için mükemmel bir deneyim oldu ve olmaya devam ediyor.</p>\n<p>Sonuç olarak, bootcampin ilk ayı benim için gerçekten harika geçti. Kendimi geliştirmenin yanı sıra, yeni insanlarla tanıştım, yeni beceriler kazandım ve kariyerimdeki bir sonraki adıma hazırlık yapma fırsatı buldum. Bu deneyimi yaşamaktan dolayı çok şanslı hissediyorum ve gelecekte neler getireceğini heyecanla bekliyorum!</p>\n<img src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=eed3742cf84d" width="1" height="1" alt="">\n',
        enclosure: {},
        categories: [
          "geleceği-yazanlar",
          "front-end-development",
          "turkcell",
          "bootcamp",
        ],
      },
      {
        title: "Writing the First Smart Contract",
        pubDate: "2023-12-29 20:58:05",
        link: "https://coinsbench.com/writing-the-first-smart-contract-08ecf9b21dc8?source=rss-aeb260affefe------2",
        guid: "https://medium.com/p/08ecf9b21dc8",
        author: "Abdullah Akkoloğlu",
        thumbnail: "",
        description:
          '\n<p>Blockchain technology has revolutionised the world of finance and technology in recent years. This innovative technology increases security and efficiency by providing a decentralised and transparent system. In this article, we will learn-how to write our first smart contract.</p>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*QEuZ9ljX7B1QIyyMGqJCHQ.jpeg"></figure><h3>What is Blockchain Technology?</h3>\n<p>Blockchain is a data structure consisting of interconnected blocks. Each block contains transactions and is securely linked by a cryptographic digest of the previous block. This makes it virtually impossible to alter or forge data.</p>\n<h3>What are Smart Contracts?</h3>\n<p>Smart contracts are programmes running on the blockchain that execute automatically when certain conditions are met. Platforms like Ethereum allow smart contracts to be developed and distributed.</p>\n<h3>What is Solidity?</h3>\n<p>Solidity is a programming language for writing Ethereum-based smart contracts. It has a syntax similar to JavaScript and facilitates the development of smart contracts.</p>\n<h3>Let’s Write Our First Smart Contract</h3>\n<ol>\n<li>There is a very good online editor that we can use as a development environment. We can use this site for a start. <a href="https://remix.ethereum.org/">https://remix.ethereum.org/</a>\n</li>\n<li>In Remix, we open our .sol file where we will write our smart contract.</li>\n</ol>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/368/1*gGcMLT879R62vN-8X0HpCA.png"></figure><p>3. We delete the codes in the file by default and create a clean page. Then we first need to write our solidity version.</p>\n<pre>// SPDX-License-Identifier: MIT<br>pragma solidity ^0.8.0;</pre>\n<p>4. Then we create a new contract.</p>\n<pre>contract MyFirstContract {<br><br>}</pre>\n<p>5. Now let’s add a simple function. For example, a function that stores and returns a number:</p>\n<p>Firstly, let’s define our variable.</p>\n<pre>uint private storedNumber;</pre>\n<p><em>uint: </em>This stands for <em>“unsigned integer”</em>. In Solidity, the uint type represents non-negative integers and is typically used for values and counts in Ethereum.</p>\n<p><em>private</em>: This is the access level of the <em>storedNumber </em>variable. Variables marked as private can only be accessed by the contract in which they are defined. This means that this variable cannot be directly accessed from other contracts or from the outside.</p>\n<p><em>storedNumber</em>: This is the name of a variable that represents a number stored in the contract. This variable is used by functions within the contract.</p>\n<p>Now let’s write our function to set the number.</p>\n<pre>function storeNumber(uint _number) public {<br>        storedNumber = _number;<br>    }</pre>\n<p><em>function</em>: This word defines a function. In Solidity, functions are the basic building blocks of the contract and perform specific operations.</p>\n<p><em>storeNumber</em>: This is the name of the function. As the name suggests, this function is used to store a number.</p>\n<p><em>(uint _number)</em>: This is the parameter of the function. It takes a parameter of type <em>uint</em>, which means that the function will take a positive integer. <em>_number</em> is the name of this parameter.</p>\n<p><em>public</em>: This is the access level of the function. Functions marked as public can be called from outside the contract.</p>\n<p><em>storedNumber =</em> <em>_number;:</em> This line assigns the number received by the function to the <em>storedNumber </em>variable. This way, the number is stored inside the contract.</p>\n<p>And let’s write the retrieve function that we will use to see the number we store.</p>\n<pre>function retrieveNumber() public view returns (uint){<br>        return storedNumber;<br>}</pre>\n<p><em>view</em>: This word indicates that the function will not change the state of the blockchain. That is, this function only reads data and does not make any changes to the blockchain.</p>\n<p><em>returns (uint)</em>: This specifies the return type of the function. In this case, the function returns a value of type uint.</p>\n<p><em>return storedNumber;:</em> This line returns the number stored in the storedNumber variable. This can be read by the outside world and used to understand the status of the contract.</p>\n<p>After all, this is what our contract looks like.</p>\n<pre>// SPDX-License-Identifier: MIT<br>pragma solidity ^0.8.0;<br><br>contract MyFirstContract {<br>    uint private storedNumber;<br><br>    function storeNumber(uint _number) public {<br>        storedNumber = _number;<br>    }<br><br>    function retrieveNumber() public view returns (uint){<br>        return storedNumber;<br>    }<br>}</pre>\n<p>6. Next, it’s time to deploy our contract. For this, we come to the deploy part of Remix.</p>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/366/1*ALMdOuHrh3Knj_r058ey0A.png"></figure><p><em>ENVIRONMENT</em>: This allows you to select the development environment used within Remix IDE. Different environments allow you to interact with different blockchain types (e.g. Ethereum Mainnet, Ropsten Test Network) or a local Ethereum virtual machine (VM).</p>\n<p><em>ACCOUNT</em>: This is your Ethereum address. This address is used to perform smart contract transactions. Remix usually offers accounts for testing purposes, and these accounts usually contain a large amount of test Ether (ETH). For example, “0x5B3…eddC4 (100 ether)” is a test address and contains 100 test Ether.</p>\n<p><em>GAS LIMIT</em>: This specifies the maximum amount of gas that can be used for a transaction. Gas is a measure of the computational and processing power required to perform transactions on the Ethereum network. The gas limit limits the maximum amount of gas a transaction can use.</p>\n<p>Then click the deploy button. And from the console we can see that our contract has been successfully deployed. We have now written our first block with our first smart contract.</p>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/842/1*NsIGEnKwuNxogqX1ksxv6w.png"></figure><p>Now we can see the contract we wrote in the “Deployed Contracts” section. Remix also shows us the functions in your contract.</p>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/303/1*JLHSEqzlnOgxjOxLW4UQ4g.png"></figure><p>Now we write a number to our storeNumber function and click on the name of the function.</p>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/301/1*-FBjLYOD-6qoM-nRYrXeCA.png"></figure><p>If you look at the Account section after you run your function, you may notice that we pay a fee to the network for the operation with the set function. Our balance, which was previously 100 test ether, has dropped below 100 ether. Of course, we paid a very, very small amount.</p>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/341/1*tugy4xXvoyYGsaRgTJB1IQ.png"></figure><p>Now let’s take a look at the number we set. Let’s run the retrieveNumber function and see the return result.</p>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/291/1*y6FppS58KUiUPxwfyYEupA.png"></figure><p>As you can see, it returned us the number 2024 that we set before. And since this get function did not change anything in the contract, the network did not charge us any fees. You can check this by checking the account section.</p>\n<p>Thus, we wrote our first smart contract, deployed it and tried how it works.</p>\n<p>Blockchain and smart contracts are recognised as the technology of the future. We have stepped into this exciting world by writing our first smart contract with Solidity. Learning this technology will open up new opportunities for us and allow us to discover new ways of expressing ourselves in the digital world.</p>\n<img src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=08ecf9b21dc8" width="1" height="1" alt=""><hr>\n<p><a href="https://coinsbench.com/writing-the-first-smart-contract-08ecf9b21dc8">Writing the First Smart Contract</a> was originally published in <a href="https://coinsbench.com/">CoinsBench</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n',
        content:
          '\n<p>Blockchain technology has revolutionised the world of finance and technology in recent years. This innovative technology increases security and efficiency by providing a decentralised and transparent system. In this article, we will learn-how to write our first smart contract.</p>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*QEuZ9ljX7B1QIyyMGqJCHQ.jpeg"></figure><h3>What is Blockchain Technology?</h3>\n<p>Blockchain is a data structure consisting of interconnected blocks. Each block contains transactions and is securely linked by a cryptographic digest of the previous block. This makes it virtually impossible to alter or forge data.</p>\n<h3>What are Smart Contracts?</h3>\n<p>Smart contracts are programmes running on the blockchain that execute automatically when certain conditions are met. Platforms like Ethereum allow smart contracts to be developed and distributed.</p>\n<h3>What is Solidity?</h3>\n<p>Solidity is a programming language for writing Ethereum-based smart contracts. It has a syntax similar to JavaScript and facilitates the development of smart contracts.</p>\n<h3>Let’s Write Our First Smart Contract</h3>\n<ol>\n<li>There is a very good online editor that we can use as a development environment. We can use this site for a start. <a href="https://remix.ethereum.org/">https://remix.ethereum.org/</a>\n</li>\n<li>In Remix, we open our .sol file where we will write our smart contract.</li>\n</ol>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/368/1*gGcMLT879R62vN-8X0HpCA.png"></figure><p>3. We delete the codes in the file by default and create a clean page. Then we first need to write our solidity version.</p>\n<pre>// SPDX-License-Identifier: MIT<br>pragma solidity ^0.8.0;</pre>\n<p>4. Then we create a new contract.</p>\n<pre>contract MyFirstContract {<br><br>}</pre>\n<p>5. Now let’s add a simple function. For example, a function that stores and returns a number:</p>\n<p>Firstly, let’s define our variable.</p>\n<pre>uint private storedNumber;</pre>\n<p><em>uint: </em>This stands for <em>“unsigned integer”</em>. In Solidity, the uint type represents non-negative integers and is typically used for values and counts in Ethereum.</p>\n<p><em>private</em>: This is the access level of the <em>storedNumber </em>variable. Variables marked as private can only be accessed by the contract in which they are defined. This means that this variable cannot be directly accessed from other contracts or from the outside.</p>\n<p><em>storedNumber</em>: This is the name of a variable that represents a number stored in the contract. This variable is used by functions within the contract.</p>\n<p>Now let’s write our function to set the number.</p>\n<pre>function storeNumber(uint _number) public {<br>        storedNumber = _number;<br>    }</pre>\n<p><em>function</em>: This word defines a function. In Solidity, functions are the basic building blocks of the contract and perform specific operations.</p>\n<p><em>storeNumber</em>: This is the name of the function. As the name suggests, this function is used to store a number.</p>\n<p><em>(uint _number)</em>: This is the parameter of the function. It takes a parameter of type <em>uint</em>, which means that the function will take a positive integer. <em>_number</em> is the name of this parameter.</p>\n<p><em>public</em>: This is the access level of the function. Functions marked as public can be called from outside the contract.</p>\n<p><em>storedNumber =</em> <em>_number;:</em> This line assigns the number received by the function to the <em>storedNumber </em>variable. This way, the number is stored inside the contract.</p>\n<p>And let’s write the retrieve function that we will use to see the number we store.</p>\n<pre>function retrieveNumber() public view returns (uint){<br>        return storedNumber;<br>}</pre>\n<p><em>view</em>: This word indicates that the function will not change the state of the blockchain. That is, this function only reads data and does not make any changes to the blockchain.</p>\n<p><em>returns (uint)</em>: This specifies the return type of the function. In this case, the function returns a value of type uint.</p>\n<p><em>return storedNumber;:</em> This line returns the number stored in the storedNumber variable. This can be read by the outside world and used to understand the status of the contract.</p>\n<p>After all, this is what our contract looks like.</p>\n<pre>// SPDX-License-Identifier: MIT<br>pragma solidity ^0.8.0;<br><br>contract MyFirstContract {<br>    uint private storedNumber;<br><br>    function storeNumber(uint _number) public {<br>        storedNumber = _number;<br>    }<br><br>    function retrieveNumber() public view returns (uint){<br>        return storedNumber;<br>    }<br>}</pre>\n<p>6. Next, it’s time to deploy our contract. For this, we come to the deploy part of Remix.</p>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/366/1*ALMdOuHrh3Knj_r058ey0A.png"></figure><p><em>ENVIRONMENT</em>: This allows you to select the development environment used within Remix IDE. Different environments allow you to interact with different blockchain types (e.g. Ethereum Mainnet, Ropsten Test Network) or a local Ethereum virtual machine (VM).</p>\n<p><em>ACCOUNT</em>: This is your Ethereum address. This address is used to perform smart contract transactions. Remix usually offers accounts for testing purposes, and these accounts usually contain a large amount of test Ether (ETH). For example, “0x5B3…eddC4 (100 ether)” is a test address and contains 100 test Ether.</p>\n<p><em>GAS LIMIT</em>: This specifies the maximum amount of gas that can be used for a transaction. Gas is a measure of the computational and processing power required to perform transactions on the Ethereum network. The gas limit limits the maximum amount of gas a transaction can use.</p>\n<p>Then click the deploy button. And from the console we can see that our contract has been successfully deployed. We have now written our first block with our first smart contract.</p>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/842/1*NsIGEnKwuNxogqX1ksxv6w.png"></figure><p>Now we can see the contract we wrote in the “Deployed Contracts” section. Remix also shows us the functions in your contract.</p>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/303/1*JLHSEqzlnOgxjOxLW4UQ4g.png"></figure><p>Now we write a number to our storeNumber function and click on the name of the function.</p>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/301/1*-FBjLYOD-6qoM-nRYrXeCA.png"></figure><p>If you look at the Account section after you run your function, you may notice that we pay a fee to the network for the operation with the set function. Our balance, which was previously 100 test ether, has dropped below 100 ether. Of course, we paid a very, very small amount.</p>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/341/1*tugy4xXvoyYGsaRgTJB1IQ.png"></figure><p>Now let’s take a look at the number we set. Let’s run the retrieveNumber function and see the return result.</p>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/291/1*y6FppS58KUiUPxwfyYEupA.png"></figure><p>As you can see, it returned us the number 2024 that we set before. And since this get function did not change anything in the contract, the network did not charge us any fees. You can check this by checking the account section.</p>\n<p>Thus, we wrote our first smart contract, deployed it and tried how it works.</p>\n<p>Blockchain and smart contracts are recognised as the technology of the future. We have stepped into this exciting world by writing our first smart contract with Solidity. Learning this technology will open up new opportunities for us and allow us to discover new ways of expressing ourselves in the digital world.</p>\n<img src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=08ecf9b21dc8" width="1" height="1" alt=""><hr>\n<p><a href="https://coinsbench.com/writing-the-first-smart-contract-08ecf9b21dc8">Writing the First Smart Contract</a> was originally published in <a href="https://coinsbench.com/">CoinsBench</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n',
        enclosure: {},
        categories: [
          "solidity",
          "blockchain",
          "smart-contracts",
          "ethereum",
          "remix",
        ],
      },
      {
        title:
          "“Hello, World!”: The Story of the Legendary First Step in Programming",
        pubDate: "2023-12-29 11:44:13",
        link: "https://akkologlu.medium.com/hello-world-the-story-of-the-legendary-first-step-in-programming-bb06a623f7f7?source=rss-aeb260affefe------2",
        guid: "https://medium.com/p/bb06a623f7f7",
        author: "Abdullah Akkoloğlu",
        thumbnail: "",
        description:
          '\n<p>There are two words that everyone who steps into the programming world is familiar with: “Hello, World!”. This simple phrase is the first sentence encountered by those who write code in a new programming language for the first time. So, where does this tradition originate from? Let’s take a look at the history of this simple, yet effective phrase.</p>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/1000/1*aPfdrf5Y14OzFUXgEwB9TA.jpeg"></figure><h3>History of a Beginning</h3>\n<p>The journey of the expression “Hello, World!” dates back to 1972, to Brian Kernighan working at Bell Laboratories. Kernighan used the phrase in a document called “A Tutorial Introduction to the Language B”.</p>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/500/1*Y6-WYq4fotZCnUSsDMIV-g.png"><figcaption>Brian Kernighan</figcaption></figure><p>However, it really gained popularity in 1978, with the publication of Kernighan and Dennis Ritchie’s book “The C Programming Language”. This book played a key role in the understanding and spread of the C programming language, and the example of “Hello, World!” played an important role in this process.</p>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/583/1*1g9JUe93fvo42Z-sh6gudg.jpeg"></figure><h3>Why “Hello, World!”?</h3>\n<p>Well, why this simple expression? The “Hello, World!” programme is perfect for demonstrating the basic features of programming languages. By printing a text message on the screen, it clearly presents the basic structure of the programme and basic input/output operations to beginners. This is an example that is easy to understand and provides a quick sense of accomplishment for those new to programming.</p>\n<h3>Impact and Legacy</h3>\n<p>Nowadays, “Hello, World!” is considered part of programming education. Almost every programming language, software development book, course or tutorial starts with this simple phrase. The continuation of this tradition symbolises the universality and accessibility of programming.</p>\n<p>These two words represent much more than just a screen message. They are the beginning of a journey, the first step in learning, and an homage to the rich history of software engineering. “Hello, World!” is not only the first step in learning programming, but also a symbol of continuous discovery and learning in this field.</p>\n<h3>Conclusion</h3>\n<p>“Hello, World!” may seem simple, but it has an important place in the history of programming. The origins of this tradition go back to the early years of software engineering, to the development of the C programming language. Today, these two words remain a cultural icon in the programming world and provide an inspiring starting point for beginners.</p>\n<pre>#include &lt;stdio.h&gt;<br><br>int main() {<br>printf("Hello World");<br>return 0;<br>}</pre>\n<pre>print("Hello World")</pre>\n<pre>    global _main<br>    extern _printf<br><br>    section .text<br>_main:<br>    push    message<br>    call    _printf<br>    add        esp, 4<br>message:<br>    db    \'Hello World\', 10, 0</pre>\n<pre>echo "Hello World";</pre>\n<pre>import java.io.*;<br><br>class GFG {<br>    public static void main (String[] args) {<br>       System.out.println("Hello World");<br>    }<br>}</pre>\n<pre>console.log("Hello World");</pre>\n<img src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=bb06a623f7f7" width="1" height="1" alt="">\n',
        content:
          '\n<p>There are two words that everyone who steps into the programming world is familiar with: “Hello, World!”. This simple phrase is the first sentence encountered by those who write code in a new programming language for the first time. So, where does this tradition originate from? Let’s take a look at the history of this simple, yet effective phrase.</p>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/1000/1*aPfdrf5Y14OzFUXgEwB9TA.jpeg"></figure><h3>History of a Beginning</h3>\n<p>The journey of the expression “Hello, World!” dates back to 1972, to Brian Kernighan working at Bell Laboratories. Kernighan used the phrase in a document called “A Tutorial Introduction to the Language B”.</p>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/500/1*Y6-WYq4fotZCnUSsDMIV-g.png"><figcaption>Brian Kernighan</figcaption></figure><p>However, it really gained popularity in 1978, with the publication of Kernighan and Dennis Ritchie’s book “The C Programming Language”. This book played a key role in the understanding and spread of the C programming language, and the example of “Hello, World!” played an important role in this process.</p>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/583/1*1g9JUe93fvo42Z-sh6gudg.jpeg"></figure><h3>Why “Hello, World!”?</h3>\n<p>Well, why this simple expression? The “Hello, World!” programme is perfect for demonstrating the basic features of programming languages. By printing a text message on the screen, it clearly presents the basic structure of the programme and basic input/output operations to beginners. This is an example that is easy to understand and provides a quick sense of accomplishment for those new to programming.</p>\n<h3>Impact and Legacy</h3>\n<p>Nowadays, “Hello, World!” is considered part of programming education. Almost every programming language, software development book, course or tutorial starts with this simple phrase. The continuation of this tradition symbolises the universality and accessibility of programming.</p>\n<p>These two words represent much more than just a screen message. They are the beginning of a journey, the first step in learning, and an homage to the rich history of software engineering. “Hello, World!” is not only the first step in learning programming, but also a symbol of continuous discovery and learning in this field.</p>\n<h3>Conclusion</h3>\n<p>“Hello, World!” may seem simple, but it has an important place in the history of programming. The origins of this tradition go back to the early years of software engineering, to the development of the C programming language. Today, these two words remain a cultural icon in the programming world and provide an inspiring starting point for beginners.</p>\n<pre>#include &lt;stdio.h&gt;<br><br>int main() {<br>printf("Hello World");<br>return 0;<br>}</pre>\n<pre>print("Hello World")</pre>\n<pre>    global _main<br>    extern _printf<br><br>    section .text<br>_main:<br>    push    message<br>    call    _printf<br>    add        esp, 4<br>message:<br>    db    \'Hello World\', 10, 0</pre>\n<pre>echo "Hello World";</pre>\n<pre>import java.io.*;<br><br>class GFG {<br>    public static void main (String[] args) {<br>       System.out.println("Hello World");<br>    }<br>}</pre>\n<pre>console.log("Hello World");</pre>\n<img src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=bb06a623f7f7" width="1" height="1" alt="">\n',
        enclosure: {},
        categories: ["history", "hello-world", "programming", "c", "code"],
      },
      {
        title: "Typescript Data Types",
        pubDate: "2023-07-19 20:37:54",
        link: "https://akkologlu.medium.com/typescript-data-types-b3f844c1b991?source=rss-aeb260affefe------2",
        guid: "https://medium.com/p/b3f844c1b991",
        author: "Abdullah Akkoloğlu",
        thumbnail: "",
        description:
          '\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*Fl18PXRfIGlqiXKIahbkjA.png"></figure><h3>TypeScript Annotations</h3>\n<p>One of the biggest differences between TypeScript and JavaScript is that TypeScript requires us to specify the types of variables when declaring them. To specify these types, there is a specific syntax. In the example below, we can define variables with four different types. If we are not sure about the type of a variable, we can declare it as “any.”</p>\n<pre>let age: number = 30;<br>let firstName: string = "John";<br>let lastName: string = "Doe";<br>let isActive: boolean = true;<br>let id: any = "12fds34grfd";</pre>\n<h3>Number</h3>\n<p>In number data types, we can use different forms like number, hexadecimal, octal, and binary. When declaring them, it is sufficient to use the type “number”, and it will provide us with the integer representation of all the forms.</p>\n<pre>let number: number = 14287; // number<br>let hexadecimalNumber: number = 0x37CF; // hexadecimal<br>let octalNumber: number = 033717; // octal<br>let binaryNumber: number = 11011111001111; // binary</pre>\n<h3>String</h3>\n<p>For the string data type, we can simply declare it as follows:</p>\n<pre>let firstName: string = "Abdullah";<br>let department: string = "Software";<br>let employeeDesc: string = `${firstName} works in the ${department} department.`;</pre>\n<h3>Boolean</h3>\n<pre>let isActive: boolean = false;</pre>\n<h3>Array</h3>\n<p>When declaring an array, it is similar to JavaScript, where we use square brackets and list the elements inside. Before the brackets, we need to specify the type of elements that the array will contain. If we try to add an element of a different type, we will receive an error.</p>\n<pre>let series: string[] = ["Breaking Bad", "Game of Thrones", "Stranger Things"];</pre>\n<p>If we do not specify a type for the array, we can add elements of any type in a mixed manner.</p>\n<pre>let array = [1, 2, "iPhone", "English", "Typescript", true, false];</pre>\n<p>We can also declare the type using the generic syntax.</p>\n<pre>let series: Array&lt;string&gt; = ["Breaking Bad", "Game of Thrones", "Stranger Things"];</pre>\n<p>If the array will contain elements of different types, we can use the “|” symbol to specify multiple types.</p>\n<pre>let array: Array&lt;string | number&gt; = [\'Apple\', 2, \'Samsung\', 3, 4, \'Huawei\'];</pre>\n<h3>Tuple</h3>\n<p>Tuples differ from arrays in that we must specify the type of elements in the tuple in the order they appear. For example, in this case, since we have specified the first part as “number”, the elements in the tuple must also be numbers in the same order.</p>\n<pre>let user: [number, string, boolean, number, string];<br>user = [2189, "Abdullah", true, 2000, "Engineer"];</pre>\n<h3>Object</h3>\n<p>When working with objects, we can either create a specific type for the object or use a general type to create objects with the same structure.</p>\n<p>Using a specific type:</p>\n<pre>let student: {<br>    firstName: string,<br>    lastName: string,<br>    age: number,<br>    department: string<br>};<br><br>student = {<br>    firstName: \'Abdullah\',<br>    lastName: \'Akkoloğlu\',<br>    age: 23,<br>    department: \'Computer Science\'<br>};</pre>\n<p>Using a type:</p>\n<pre>type Student = {<br>    firstName: string,<br>    lastName: string,<br>    age: number,<br>    department: string<br>};<br><br>let student1: Student;<br><br>student1 = {<br>    firstName: \'Abdullah\',<br>    lastName: \'Akkoloğlu\',<br>    age: 23,<br>    department: \'Computer Science\'<br>};</pre>\n<h3>Union</h3>\n<p>Union allows us to specify multiple types for a variable.</p>\n<p>For example, for the variable “x,” we can provide three different type options.</p>\n<pre>let x: string | number | boolean;<br><br>x = 2023;<br>x = "Typescript";<br>x = true;</pre>\n<h3>Void</h3>\n<p>Void is used when defining functions that do not return anything, as in many other programming languages.</p>\n<pre>function sayHi(): void {<br>    console.log(\'Hi\');<br>}</pre>\n<h3>Type Inference</h3>\n<p>TypeScript is capable of type inference, which means that it can detect the type of a variable even if we do not explicitly specify it. However, it is always safer to specify the type.</p>\n<pre>let x = 0;<br>console.log(typeof (x)); // number</pre>\n<img src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=b3f844c1b991" width="1" height="1" alt="">\n',
        content:
          '\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*Fl18PXRfIGlqiXKIahbkjA.png"></figure><h3>TypeScript Annotations</h3>\n<p>One of the biggest differences between TypeScript and JavaScript is that TypeScript requires us to specify the types of variables when declaring them. To specify these types, there is a specific syntax. In the example below, we can define variables with four different types. If we are not sure about the type of a variable, we can declare it as “any.”</p>\n<pre>let age: number = 30;<br>let firstName: string = "John";<br>let lastName: string = "Doe";<br>let isActive: boolean = true;<br>let id: any = "12fds34grfd";</pre>\n<h3>Number</h3>\n<p>In number data types, we can use different forms like number, hexadecimal, octal, and binary. When declaring them, it is sufficient to use the type “number”, and it will provide us with the integer representation of all the forms.</p>\n<pre>let number: number = 14287; // number<br>let hexadecimalNumber: number = 0x37CF; // hexadecimal<br>let octalNumber: number = 033717; // octal<br>let binaryNumber: number = 11011111001111; // binary</pre>\n<h3>String</h3>\n<p>For the string data type, we can simply declare it as follows:</p>\n<pre>let firstName: string = "Abdullah";<br>let department: string = "Software";<br>let employeeDesc: string = `${firstName} works in the ${department} department.`;</pre>\n<h3>Boolean</h3>\n<pre>let isActive: boolean = false;</pre>\n<h3>Array</h3>\n<p>When declaring an array, it is similar to JavaScript, where we use square brackets and list the elements inside. Before the brackets, we need to specify the type of elements that the array will contain. If we try to add an element of a different type, we will receive an error.</p>\n<pre>let series: string[] = ["Breaking Bad", "Game of Thrones", "Stranger Things"];</pre>\n<p>If we do not specify a type for the array, we can add elements of any type in a mixed manner.</p>\n<pre>let array = [1, 2, "iPhone", "English", "Typescript", true, false];</pre>\n<p>We can also declare the type using the generic syntax.</p>\n<pre>let series: Array&lt;string&gt; = ["Breaking Bad", "Game of Thrones", "Stranger Things"];</pre>\n<p>If the array will contain elements of different types, we can use the “|” symbol to specify multiple types.</p>\n<pre>let array: Array&lt;string | number&gt; = [\'Apple\', 2, \'Samsung\', 3, 4, \'Huawei\'];</pre>\n<h3>Tuple</h3>\n<p>Tuples differ from arrays in that we must specify the type of elements in the tuple in the order they appear. For example, in this case, since we have specified the first part as “number”, the elements in the tuple must also be numbers in the same order.</p>\n<pre>let user: [number, string, boolean, number, string];<br>user = [2189, "Abdullah", true, 2000, "Engineer"];</pre>\n<h3>Object</h3>\n<p>When working with objects, we can either create a specific type for the object or use a general type to create objects with the same structure.</p>\n<p>Using a specific type:</p>\n<pre>let student: {<br>    firstName: string,<br>    lastName: string,<br>    age: number,<br>    department: string<br>};<br><br>student = {<br>    firstName: \'Abdullah\',<br>    lastName: \'Akkoloğlu\',<br>    age: 23,<br>    department: \'Computer Science\'<br>};</pre>\n<p>Using a type:</p>\n<pre>type Student = {<br>    firstName: string,<br>    lastName: string,<br>    age: number,<br>    department: string<br>};<br><br>let student1: Student;<br><br>student1 = {<br>    firstName: \'Abdullah\',<br>    lastName: \'Akkoloğlu\',<br>    age: 23,<br>    department: \'Computer Science\'<br>};</pre>\n<h3>Union</h3>\n<p>Union allows us to specify multiple types for a variable.</p>\n<p>For example, for the variable “x,” we can provide three different type options.</p>\n<pre>let x: string | number | boolean;<br><br>x = 2023;<br>x = "Typescript";<br>x = true;</pre>\n<h3>Void</h3>\n<p>Void is used when defining functions that do not return anything, as in many other programming languages.</p>\n<pre>function sayHi(): void {<br>    console.log(\'Hi\');<br>}</pre>\n<h3>Type Inference</h3>\n<p>TypeScript is capable of type inference, which means that it can detect the type of a variable even if we do not explicitly specify it. However, it is always safer to specify the type.</p>\n<pre>let x = 0;<br>console.log(typeof (x)); // number</pre>\n<img src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=b3f844c1b991" width="1" height="1" alt="">\n',
        enclosure: {},
        categories: [
          "annotations",
          "typescript",
          "data-type",
          "javascript",
          "software-development",
        ],
      },
      {
        title: "React Formik and Yup",
        pubDate: "2023-07-17 17:14:06",
        link: "https://akkologlu.medium.com/react-formik-and-yup-7f3a43a42454?source=rss-aeb260affefe------2",
        guid: "https://medium.com/p/7f3a43a42454",
        author: "Abdullah Akkoloğlu",
        thumbnail: "",
        description:
          '\n<p>The Formik library is specifically designed for managing form operations in React, making our tasks easier. Formik provides us with three main advantages:</p>\n<ol>\n<li>Getting values in and out of form state: Formik facilitates the seamless handling of form values, allowing easy access to and retrieval from the form state.</li>\n<li>Validation and error messages: With Formik, we can effortlessly implement form validation and display error messages whenever necessary.</li>\n<li>Handling form submission: Formik simplifies the process of handling form submissions, streamlining the interaction between the form and the underlying data logic.</li>\n</ol>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*AWY673MFCVEjN-MCPv438Q.png"></figure><p>Now we can start building our form. First, let’s create an input field for the email address and leave the value attribute empty for now.</p>\n<pre>&lt;form&gt;<br>  &lt;div&gt;<br>    &lt;label&gt;Email&lt;/label&gt;<br>    &lt;input<br>      type="email"<br>      value={}<br>      id="email"<br>      placeholder="Enter your e-mail"<br>    /&gt;<br>  &lt;/div&gt;<br>&lt;/form&gt;</pre>\n<p>After that, we create a useFormik hook. You can examine the syntax of this hook in Formik’s official documentation on their website.</p>\n<pre>const formik = useFormik({<br> initialValues: {<br>   email: "",<br> },<br>});</pre>\n<p>Exactly, in the `initialValues` section, we define the variables that will hold the information we collect from the user.</p>\n<p>Now, you can fill in the `value` attribute for the email input that we created earlier.</p>\n<pre>value={formik.values.email}</pre>\n<p>Absolutely, we might not want to write “formik.” every time. To achieve a cleaner code, we can use JavaScript’s destructuring feature to specify the required variables and functions upfront. The updated version of useFormik would look like this:</p>\n<pre>const { values, errors, handleChange, handleSubmit } = useFormik({<br> initialValues: {<br>   email: "",<br> },<br>});</pre>\n<p>The updated version of ‘value’ would be:</p>\n<pre>value={values.email}</pre>\n<p>Sure, we are now doing the same for age and password as well. After all the edits, our code will appear as follows:</p>\n<pre>import React from "react";<br>import { useFormik } from "formik";<br><br>function GeneralForm() {<br>  const { values, errors, handleChange, handleSubmit } = useFormik({<br>    initialValues: {<br>      email: "",<br>      age: "",<br>      password: "",<br>      confirmPassword: "",<br>    },<br>  });<br>  return (<br>    &lt;form&gt;<br>      &lt;div&gt;<br>        &lt;label&gt;Email&lt;/label&gt;<br>        &lt;input<br>          type="email"<br>          value={values.email}<br>          onChange={handleChange}<br>          id="email"<br>          placeholder="Enter your e-mail"<br>        /&gt;<br>      &lt;/div&gt;<br>      &lt;div&gt;<br>        &lt;label&gt;Age&lt;/label&gt;<br>        &lt;input<br>          type="number"<br>          value={values.age}<br>          onChange={handleChange}<br>          id="age"<br>          placeholder="Enter your age"<br>        /&gt;<br>      &lt;/div&gt;<br>      &lt;div&gt;<br>        &lt;label&gt;Password&lt;/label&gt;<br>        &lt;input<br>          type="password"<br>          value={values.password}<br>          onChange={handleChange}<br>          id="passsword"<br>          placeholder="Enter your password"<br>        /&gt;<br>      &lt;/div&gt;<br>      &lt;div&gt;<br>        &lt;label&gt;Confirm Password&lt;/label&gt;<br>        &lt;input<br>          type="password"<br>          value={values.confirmPassword}<br>          onChange={handleChange}<br>          id="confirmPassword"<br>          placeholder="Enter your password again"<br>        /&gt;<br>      &lt;/div&gt;<br>    &lt;/form&gt;<br>  );<br>}<br><br>export default GeneralForm;</pre>\n<p>Later, we add a button below the form.</p>\n<pre>&lt;button type="submit"&gt;Save&lt;/button&gt;</pre>\n<p>After applying some CSS, our form appears like this:</p>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/554/1*qk_CU5Z24IUEziReQYmWvw.png"></figure><p>Great! We have created the form, and now we will use the “yup” library for validations. For this, We will open an `index.js” file in the “schemas” folder and importing “yup” into it. Then, we will use “yup.object().shape()” to define the necessary rules for the input fields in the desired format.</p>\n<pre>export const basicSchema = yup.object().shape({})</pre>\n<p>Firstly, we are handling the validations for the email input. We use .string() to specify that the input should be a string, and .email() to indicate that the type should be an email format. Additionally, if something other than an email format is entered, we can show an error message to the user. Lastly, we use .required() to specify that this input is mandatory, meaning the user must fill it out.</p>\n<pre>email: yup<br> .string()<br> .email("Please enter a valid email!")<br> .required("Email is required"),</pre>\n<p>We are performing the same process for the ‘age’ field, specifying that it should be a positive number and an integer.</p>\n<pre>age: yup<br> .number()<br> .positive("Please enter a positive number")<br> .integer("Please enter a integer number")<br> .required("Age is required"),</pre>\n<p>And for the password, we need to use the ‘min()’ and ‘matches()’ functions to specify the minimum character count and password rule, respectively. To define the password rule, we can create a variable with a REGEX format beforehand.</p>\n<pre>const passwordRules = /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{5,}$/;<br>password: yup<br> .string()<br> .min(5, "Please enter minimum 5 character")<br> .matches(passwordRules, {<br>   message:<br>     "Please enter at least 1 uppercase letter, 1 lowercase letter and 1 number",<br> })<br> .required("Password i,s required"),</pre>\n<p>Finally, for the confirm password, we will use the ‘oneOf()’ function to match it with the old password, and within it, we will use ‘ref()’ to specify the reference to the password field.</p>\n<pre>confirmPassword: yup<br> .string()<br> .oneOf([yup.ref("password")], "Passwords do not match.")<br> .required("Re-entering the password is mandatory."),<br>});</pre>\n<p>The final version of “schemas/index.js” is as follows:</p>\n<pre>import * as yup from "yup";<br>const passwordRules = /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{5,}$/;<br>export const basicSchema = yup.object().shape({<br>  email: yup<br>    .string()<br>    .email("Please enter a valid email!")<br>    .required("Email is required"),<br>  age: yup<br>    .number()<br>    .positive("Please enter a positive number")<br>    .integer("Please enter a integer number")<br>    .required("Age is required"),<br>  password: yup<br>    .string()<br>    .min(5, "Please enter minimum 5 character")<br>    .matches(passwordRules, {<br>      message:<br>        "Please enter at least 1 uppercase letter, 1 lowercase letter and 1 number",<br>    })<br>    .required("Password i,s required"),<br>  confirmPassword: yup<br>    .string()<br>    .oneOf([yup.ref("password")], "Passwords do not match.")<br>    .required("Re-entering the password is mandatory."),<br>});</pre>\n<p>Now, we need to use these rules inside the GeneralForm. For this, after the initialValues section inside useFormik, we define the validationSchema and pass the basicSchema that we created earlier. Now, our rules will be applied to this form.</p>\n<pre>const { values, errors, handleChange, handleSubmit } = useFormik({<br> initialValues: {<br>   email: "",<br>   age: "",<br>   password: "",<br>   confirmPassword: "",<br> },<br> validationSchema: basicSchema,<br>});</pre>\n<p>Now, let’s add onSubmit to our form and include it in useFormik.</p>\n<pre>&lt;form onSubmit={handleSubmit}&gt;<br><br>...,<br>validationSchema: basicSchema,<br>onSubmit,<br>});<br>....</pre>\n<p>Next, we have the error part. If the entered input doesn’t match the format we want, we can display the messages defined in `basicSchema` below the input. And we can change the appearance of the input. For this, we define a condition below the input inside the form and specify that if there is an error, display my error message, and also assign a `className` to style the error message appearance.</p>\n<pre>errors.email &amp;&amp; &lt;p className="error"&gt;{errors.email}&lt;/p&gt;</pre>\n<p>And, to make the input look different as well, we also define a conditional className for the input itself. Here\'s how our email section of the form looks like:</p>\n<pre>&lt;div className="inputDiv"&gt;<br>  &lt;label&gt;Email&lt;/label&gt;<br>  &lt;input<br>    type="email"<br>    value={values.email}<br>    onChange={handleChange}<br>    id="email"<br>    placeholder="Enter your e-mail"<br>    className={errors.email ? "input-error" : ""}<br>  /&gt;<br>  {errors.email &amp;&amp; &lt;p className="error"&gt;{errors.email}&lt;/p&gt;}<br>&lt;/div&gt;</pre>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/578/1*KlX7pO_yrhSckT6Go51ZMg.png"></figure><figure><img alt="" src="https://cdn-images-1.medium.com/max/553/1*tN40Ec2kYRe3Ed8gW0foeA.png"></figure><p>And we perform these steps for all the inputs.</p>\n<pre>    &lt;form onSubmit={handleSubmit}&gt;<br>      &lt;div className="inputDiv"&gt;<br>        &lt;label&gt;Email&lt;/label&gt;<br>        &lt;input<br>          type="email"<br>          value={values.email}<br>          onChange={handleChange}<br>          id="email"<br>          placeholder="Enter your e-mail"<br>          className={errors.email ? "input-error" : ""}<br>        /&gt;<br>        {errors.email &amp;&amp; &lt;p className="error"&gt;{errors.email}&lt;/p&gt;}<br>      &lt;/div&gt;<br>      &lt;div className="inputDiv"&gt;<br>        &lt;label&gt;Age&lt;/label&gt;<br>        &lt;input<br>          type="number"<br>          value={values.age}<br>          onChange={handleChange}<br>          id="age"<br>          placeholder="Enter your age"<br>          className={errors.age ? "input-error" : ""}<br>        /&gt;<br>        {errors.age &amp;&amp; &lt;p className="error"&gt;{errors.age}&lt;/p&gt;}<br>      &lt;/div&gt;<br>      &lt;div className="inputDiv"&gt;<br>        &lt;label&gt;Password&lt;/label&gt;<br>        &lt;input<br>          type="password"<br>          value={values.password}<br>          onChange={handleChange}<br>          id="passsword"<br>          placeholder="Enter your password"<br>          className={errors.password ? "input-error" : ""}<br>        /&gt;<br>        {errors.password &amp;&amp; &lt;p className="error"&gt;{errors.password}&lt;/p&gt;}<br>      &lt;/div&gt;<br>      &lt;div className="inputDiv"&gt;<br>        &lt;label&gt;Confirm Password&lt;/label&gt;<br>        &lt;input<br>          type="password"<br>          value={values.confirmPassword}<br>          onChange={handleChange}<br>          id="confirmPassword"<br>          placeholder="Enter your password again"<br>          className={errors.confirmPassword ? "input-error" : ""}<br>        /&gt;<br>        {errors.confirmPassword &amp;&amp; (<br>          &lt;p className="error"&gt;{errors.confirmPassword}&lt;/p&gt;<br>        )}<br>      &lt;/div&gt;<br>      &lt;button type="submit"&gt;Save&lt;/button&gt;<br>    &lt;/form&gt;</pre>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/553/1*jogzpx4p5lgVXiH7Q_8Xwg.png"></figure><p>Now let’s move on to the onSubmit part. In our onSubmit method, we will have two variables. One of them is values, which holds the values entered in the inputs. The other is actions, which contains the methods we may need to use in this form. For example, after submitting the form, if we need to reset the inputs, we can use actions.resetForm().</p>\n<pre>const onSubmit = async (values, actions) =&gt; {<br>  actions.resetForm();<br>};</pre>\n<p>By doing this, we have learned the fundamentals of the Formik and Yup libraries, which are commonly encountered in React projects. These libraries are especially helpful and accelerate our work, particularly when dealing with form operations. Developing projects using these libraries and exploring their various features is crucial as it allows us to benefit from their functionalities effectively.</p>\n<p><em>This article is a compilation of notes I took from an online software development course I attended.</em></p>\n<img src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=7f3a43a42454" width="1" height="1" alt="">\n',
        content:
          '\n<p>The Formik library is specifically designed for managing form operations in React, making our tasks easier. Formik provides us with three main advantages:</p>\n<ol>\n<li>Getting values in and out of form state: Formik facilitates the seamless handling of form values, allowing easy access to and retrieval from the form state.</li>\n<li>Validation and error messages: With Formik, we can effortlessly implement form validation and display error messages whenever necessary.</li>\n<li>Handling form submission: Formik simplifies the process of handling form submissions, streamlining the interaction between the form and the underlying data logic.</li>\n</ol>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*AWY673MFCVEjN-MCPv438Q.png"></figure><p>Now we can start building our form. First, let’s create an input field for the email address and leave the value attribute empty for now.</p>\n<pre>&lt;form&gt;<br>  &lt;div&gt;<br>    &lt;label&gt;Email&lt;/label&gt;<br>    &lt;input<br>      type="email"<br>      value={}<br>      id="email"<br>      placeholder="Enter your e-mail"<br>    /&gt;<br>  &lt;/div&gt;<br>&lt;/form&gt;</pre>\n<p>After that, we create a useFormik hook. You can examine the syntax of this hook in Formik’s official documentation on their website.</p>\n<pre>const formik = useFormik({<br> initialValues: {<br>   email: "",<br> },<br>});</pre>\n<p>Exactly, in the `initialValues` section, we define the variables that will hold the information we collect from the user.</p>\n<p>Now, you can fill in the `value` attribute for the email input that we created earlier.</p>\n<pre>value={formik.values.email}</pre>\n<p>Absolutely, we might not want to write “formik.” every time. To achieve a cleaner code, we can use JavaScript’s destructuring feature to specify the required variables and functions upfront. The updated version of useFormik would look like this:</p>\n<pre>const { values, errors, handleChange, handleSubmit } = useFormik({<br> initialValues: {<br>   email: "",<br> },<br>});</pre>\n<p>The updated version of ‘value’ would be:</p>\n<pre>value={values.email}</pre>\n<p>Sure, we are now doing the same for age and password as well. After all the edits, our code will appear as follows:</p>\n<pre>import React from "react";<br>import { useFormik } from "formik";<br><br>function GeneralForm() {<br>  const { values, errors, handleChange, handleSubmit } = useFormik({<br>    initialValues: {<br>      email: "",<br>      age: "",<br>      password: "",<br>      confirmPassword: "",<br>    },<br>  });<br>  return (<br>    &lt;form&gt;<br>      &lt;div&gt;<br>        &lt;label&gt;Email&lt;/label&gt;<br>        &lt;input<br>          type="email"<br>          value={values.email}<br>          onChange={handleChange}<br>          id="email"<br>          placeholder="Enter your e-mail"<br>        /&gt;<br>      &lt;/div&gt;<br>      &lt;div&gt;<br>        &lt;label&gt;Age&lt;/label&gt;<br>        &lt;input<br>          type="number"<br>          value={values.age}<br>          onChange={handleChange}<br>          id="age"<br>          placeholder="Enter your age"<br>        /&gt;<br>      &lt;/div&gt;<br>      &lt;div&gt;<br>        &lt;label&gt;Password&lt;/label&gt;<br>        &lt;input<br>          type="password"<br>          value={values.password}<br>          onChange={handleChange}<br>          id="passsword"<br>          placeholder="Enter your password"<br>        /&gt;<br>      &lt;/div&gt;<br>      &lt;div&gt;<br>        &lt;label&gt;Confirm Password&lt;/label&gt;<br>        &lt;input<br>          type="password"<br>          value={values.confirmPassword}<br>          onChange={handleChange}<br>          id="confirmPassword"<br>          placeholder="Enter your password again"<br>        /&gt;<br>      &lt;/div&gt;<br>    &lt;/form&gt;<br>  );<br>}<br><br>export default GeneralForm;</pre>\n<p>Later, we add a button below the form.</p>\n<pre>&lt;button type="submit"&gt;Save&lt;/button&gt;</pre>\n<p>After applying some CSS, our form appears like this:</p>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/554/1*qk_CU5Z24IUEziReQYmWvw.png"></figure><p>Great! We have created the form, and now we will use the “yup” library for validations. For this, We will open an `index.js” file in the “schemas” folder and importing “yup” into it. Then, we will use “yup.object().shape()” to define the necessary rules for the input fields in the desired format.</p>\n<pre>export const basicSchema = yup.object().shape({})</pre>\n<p>Firstly, we are handling the validations for the email input. We use .string() to specify that the input should be a string, and .email() to indicate that the type should be an email format. Additionally, if something other than an email format is entered, we can show an error message to the user. Lastly, we use .required() to specify that this input is mandatory, meaning the user must fill it out.</p>\n<pre>email: yup<br> .string()<br> .email("Please enter a valid email!")<br> .required("Email is required"),</pre>\n<p>We are performing the same process for the ‘age’ field, specifying that it should be a positive number and an integer.</p>\n<pre>age: yup<br> .number()<br> .positive("Please enter a positive number")<br> .integer("Please enter a integer number")<br> .required("Age is required"),</pre>\n<p>And for the password, we need to use the ‘min()’ and ‘matches()’ functions to specify the minimum character count and password rule, respectively. To define the password rule, we can create a variable with a REGEX format beforehand.</p>\n<pre>const passwordRules = /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{5,}$/;<br>password: yup<br> .string()<br> .min(5, "Please enter minimum 5 character")<br> .matches(passwordRules, {<br>   message:<br>     "Please enter at least 1 uppercase letter, 1 lowercase letter and 1 number",<br> })<br> .required("Password i,s required"),</pre>\n<p>Finally, for the confirm password, we will use the ‘oneOf()’ function to match it with the old password, and within it, we will use ‘ref()’ to specify the reference to the password field.</p>\n<pre>confirmPassword: yup<br> .string()<br> .oneOf([yup.ref("password")], "Passwords do not match.")<br> .required("Re-entering the password is mandatory."),<br>});</pre>\n<p>The final version of “schemas/index.js” is as follows:</p>\n<pre>import * as yup from "yup";<br>const passwordRules = /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{5,}$/;<br>export const basicSchema = yup.object().shape({<br>  email: yup<br>    .string()<br>    .email("Please enter a valid email!")<br>    .required("Email is required"),<br>  age: yup<br>    .number()<br>    .positive("Please enter a positive number")<br>    .integer("Please enter a integer number")<br>    .required("Age is required"),<br>  password: yup<br>    .string()<br>    .min(5, "Please enter minimum 5 character")<br>    .matches(passwordRules, {<br>      message:<br>        "Please enter at least 1 uppercase letter, 1 lowercase letter and 1 number",<br>    })<br>    .required("Password i,s required"),<br>  confirmPassword: yup<br>    .string()<br>    .oneOf([yup.ref("password")], "Passwords do not match.")<br>    .required("Re-entering the password is mandatory."),<br>});</pre>\n<p>Now, we need to use these rules inside the GeneralForm. For this, after the initialValues section inside useFormik, we define the validationSchema and pass the basicSchema that we created earlier. Now, our rules will be applied to this form.</p>\n<pre>const { values, errors, handleChange, handleSubmit } = useFormik({<br> initialValues: {<br>   email: "",<br>   age: "",<br>   password: "",<br>   confirmPassword: "",<br> },<br> validationSchema: basicSchema,<br>});</pre>\n<p>Now, let’s add onSubmit to our form and include it in useFormik.</p>\n<pre>&lt;form onSubmit={handleSubmit}&gt;<br><br>...,<br>validationSchema: basicSchema,<br>onSubmit,<br>});<br>....</pre>\n<p>Next, we have the error part. If the entered input doesn’t match the format we want, we can display the messages defined in `basicSchema` below the input. And we can change the appearance of the input. For this, we define a condition below the input inside the form and specify that if there is an error, display my error message, and also assign a `className` to style the error message appearance.</p>\n<pre>errors.email &amp;&amp; &lt;p className="error"&gt;{errors.email}&lt;/p&gt;</pre>\n<p>And, to make the input look different as well, we also define a conditional className for the input itself. Here\'s how our email section of the form looks like:</p>\n<pre>&lt;div className="inputDiv"&gt;<br>  &lt;label&gt;Email&lt;/label&gt;<br>  &lt;input<br>    type="email"<br>    value={values.email}<br>    onChange={handleChange}<br>    id="email"<br>    placeholder="Enter your e-mail"<br>    className={errors.email ? "input-error" : ""}<br>  /&gt;<br>  {errors.email &amp;&amp; &lt;p className="error"&gt;{errors.email}&lt;/p&gt;}<br>&lt;/div&gt;</pre>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/578/1*KlX7pO_yrhSckT6Go51ZMg.png"></figure><figure><img alt="" src="https://cdn-images-1.medium.com/max/553/1*tN40Ec2kYRe3Ed8gW0foeA.png"></figure><p>And we perform these steps for all the inputs.</p>\n<pre>    &lt;form onSubmit={handleSubmit}&gt;<br>      &lt;div className="inputDiv"&gt;<br>        &lt;label&gt;Email&lt;/label&gt;<br>        &lt;input<br>          type="email"<br>          value={values.email}<br>          onChange={handleChange}<br>          id="email"<br>          placeholder="Enter your e-mail"<br>          className={errors.email ? "input-error" : ""}<br>        /&gt;<br>        {errors.email &amp;&amp; &lt;p className="error"&gt;{errors.email}&lt;/p&gt;}<br>      &lt;/div&gt;<br>      &lt;div className="inputDiv"&gt;<br>        &lt;label&gt;Age&lt;/label&gt;<br>        &lt;input<br>          type="number"<br>          value={values.age}<br>          onChange={handleChange}<br>          id="age"<br>          placeholder="Enter your age"<br>          className={errors.age ? "input-error" : ""}<br>        /&gt;<br>        {errors.age &amp;&amp; &lt;p className="error"&gt;{errors.age}&lt;/p&gt;}<br>      &lt;/div&gt;<br>      &lt;div className="inputDiv"&gt;<br>        &lt;label&gt;Password&lt;/label&gt;<br>        &lt;input<br>          type="password"<br>          value={values.password}<br>          onChange={handleChange}<br>          id="passsword"<br>          placeholder="Enter your password"<br>          className={errors.password ? "input-error" : ""}<br>        /&gt;<br>        {errors.password &amp;&amp; &lt;p className="error"&gt;{errors.password}&lt;/p&gt;}<br>      &lt;/div&gt;<br>      &lt;div className="inputDiv"&gt;<br>        &lt;label&gt;Confirm Password&lt;/label&gt;<br>        &lt;input<br>          type="password"<br>          value={values.confirmPassword}<br>          onChange={handleChange}<br>          id="confirmPassword"<br>          placeholder="Enter your password again"<br>          className={errors.confirmPassword ? "input-error" : ""}<br>        /&gt;<br>        {errors.confirmPassword &amp;&amp; (<br>          &lt;p className="error"&gt;{errors.confirmPassword}&lt;/p&gt;<br>        )}<br>      &lt;/div&gt;<br>      &lt;button type="submit"&gt;Save&lt;/button&gt;<br>    &lt;/form&gt;</pre>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/553/1*jogzpx4p5lgVXiH7Q_8Xwg.png"></figure><p>Now let’s move on to the onSubmit part. In our onSubmit method, we will have two variables. One of them is values, which holds the values entered in the inputs. The other is actions, which contains the methods we may need to use in this form. For example, after submitting the form, if we need to reset the inputs, we can use actions.resetForm().</p>\n<pre>const onSubmit = async (values, actions) =&gt; {<br>  actions.resetForm();<br>};</pre>\n<p>By doing this, we have learned the fundamentals of the Formik and Yup libraries, which are commonly encountered in React projects. These libraries are especially helpful and accelerate our work, particularly when dealing with form operations. Developing projects using these libraries and exploring their various features is crucial as it allows us to benefit from their functionalities effectively.</p>\n<p><em>This article is a compilation of notes I took from an online software development course I attended.</em></p>\n<img src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=7f3a43a42454" width="1" height="1" alt="">\n',
        enclosure: {},
        categories: [
          "formik",
          "react-forms",
          "yup",
          "react",
          "form-validation",
        ],
      },
      {
        title: "React Router",
        pubDate: "2023-07-13 19:03:13",
        link: "https://akkologlu.medium.com/react-router-cd2eba75be76?source=rss-aeb260affefe------2",
        guid: "https://medium.com/p/cd2eba75be76",
        author: "Abdullah Akkoloğlu",
        thumbnail: "",
        description:
          '\n<p>Router is a tool that facilitates connections and transitions between web pages and makes our job much easier. In this article, we will cover the basics of using Routers in React applications and the different Router features.</p>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*S0TnDWvaYhqNZcfOdcslIQ.png"></figure><p>After installing the necessary packages for router usage, we first wrap our App component with &lt;BrowserRouter&gt; tags in the index.js file to enable the router features.</p>\n<pre>&lt;BrowserRouter&gt;<br>  &lt;App /&gt;<br>&lt;/BrowserRouter&gt;</pre>\n<p>After doing this, in App.js, we need to import {Routes, Route}. Inside the return statement, we can now use each &lt;Route&gt; tag between the &lt;Routes&gt; tags. Each &lt;Route&gt; tag corresponds to a page, and the link we provide in the path attribute of the Route tag determines the path of our component. If you write a path as path="/", it will act as your homepage and will be the page that appears first when the localhost is opened (<a href="http://localhost:3000/">http://localhost:3000/</a>). Then, you can create different routers like path="/aboutUs" (<a href="http://localhost:3000/aboutUs">http://localhost:3000/aboutUs</a>) to facilitate navigation between pages.</p>\n<pre>import { Routes, Route } from "react-router-dom";<br>import Home from "./components/Home";<br>import AboutUs from "./components/aboutUs";<br><br>function App() {<br>  return (<br>    &lt;div className="App"&gt;<br>      &lt;Navbar /&gt;<br>      &lt;Routes&gt;<br>        &lt;Route path="/" element={&lt;Home /&gt;} /&gt;<br>        &lt;Route path="/aboutUs" element={&lt;AboutUs /&gt;} /&gt;<br>      &lt;/Routes&gt;<br>    &lt;/div&gt;<br>  );<br>}<br>export default App;</pre>\n<h3>NavLink</h3>\n<p>Now let’s take a look at NavLink, which is necessary for page transitions. Probably the best example would be creating a navbar. After creating a navbar in a separate component, we import the {NavLink} property and between the &lt;nav&gt; tags in the return part of our Navbar.js file, we open a &lt;NavLink&gt; tag for each page we want to navigate to. We provide the same links in the "to" attribute of these link tags as we provided in the path attribute in App.js. This way, when we click on these &lt;NavLink&gt;s, we can navigate between pages. Additionally, our &lt;NavLink&gt;s have an active property. It automatically adds the "active" class to the currently active page. You can make your navbar more functional by applying CSS to the “active” class.</p>\n<pre>import React from "react";<br>import { NavLink } from "react-router-dom";<br><br>function Navbar() {<br>  return (<br>    &lt;nav className="mainNav"&gt;<br>      &lt;NavLink to="/"&gt;Home&lt;/NavLink&gt;<br>      &lt;NavLink to="/aboutUs"&gt;About&lt;/NavLink&gt;<br>      &lt;NavLink to="/mission"&gt;Mission&lt;/NavLink&gt;<br>    &lt;/nav&gt;<br>  );<br>}<br><br>export default Navbar;</pre>\n<h3>useNavigate</h3>\n<p>Now, if we want to dynamically navigate from one page to another, for example, by clicking a button, what should we use? Here comes the useNavigate feature. For example, if we want to go from the Home page to the Mission page by clicking a button, we need to do the following: First, of course, import useNavigate.</p>\n<pre>import { useNavigate } from "react-router-dom";</pre>\n<p>Then, we can assign useNavigate() to a variable for easier use.</p>\n<pre>const navigate = useNavigate();</pre>\n<p>Next, we should assign this navigate() function to the onClick attribute of our button, and write the path we want to go to inside the parentheses.</p>\n<pre>&lt;button onClick={() =&gt; navigate("/mission")}&gt;Go to Mission&lt;/button&gt;</pre>\n<p>This way, when we click the button, we can go to the “Mission” page.</p>\n<pre>import React from "react";<br>import { useNavigate } from "react-router-dom";<br><br>function Home() {<br>  const navigate = useNavigate();<br>  return (<br>    &lt;&gt;<br>      &lt;div&gt;Home&lt;/div&gt;<br>      &lt;button onClick={() =&gt; navigate("/mission")}&gt;Go to Mission&lt;/button&gt;<br>    &lt;/&gt;<br>  );<br>}<br><br>export default Home;</pre>\n<h3>404 Not Found</h3>\n<p>Sometimes we may mistype a link and go to a non-existent path, resulting in a “page not found” or “404 not found” page. How can we create this page? For this, we can create a new component and inform the user that they have landed on the wrong page. After creating the “WrongPath.js” file, you can write the message you want to display on the screen.</p>\n<pre>import React from "react";<br><br>function WrongPath() {<br>  return &lt;div&gt;Hmmm, we couldn\'t find any matches.&lt;/div&gt;;<br>}<br><br>export default WrongPath;</pre>\n<p>Then, add a new &lt;Route&gt; in App.js, and set the path attribute of this &lt;Route&gt; to " * <em>". The " * </em>", if the link the user typed does not match any path, directly redirects to this &lt;Route&gt;, and this way, you can see your error page message.</p>\n<pre>&lt;Route path="*" element={&lt;WrongPath /&gt;} /&gt;</pre>\n<h3>Nested Routes</h3>\n<p>Can we nest different &lt;Route&gt;s inside a &lt;Route&gt; element and branch our tree? Yes. For this, instead of closing the &lt;Route&gt; tag of the page we want to branch in a single line, we close it with "&lt;/Route&gt;" and enter inside.</p>\n<pre>&lt;Route path="/history" element={&lt;History /&gt;}&gt;<br><br>&lt;/Route&gt;</pre>\n<p>Here, we can write as many new &lt;Route&gt;s as we want. And of course, we give them path attributes. However, there is one thing to be careful about here: if we start with "/" in nested &lt;Route&gt;s, we get an error. Therefore, in nested &lt;Route&gt;s, we should directly write the path name without using "/" (path="example").</p>\n<pre>&lt;Route path="/history" element={&lt;History /&gt;}&gt;<br>  &lt;Route path="team" element={&lt;Team /&gt;} /&gt;<br>  &lt;Route path="company" element={&lt;Company /&gt;} /&gt;<br>&lt;/Route&gt;</pre>\n<p>Then, in the parent &lt;Route&gt; page, we place our link tags for the navigational buttons, either &lt;Link&gt; or &lt;NavLink&gt;.</p>\n<pre>&lt;nav&gt;<br>  &lt;Link to={"company"}&gt;Our Companies&lt;/Link&gt;<br>  &lt;Link to={"team"}&gt;Team&lt;/Link&gt;<br>&lt;/nav&gt;</pre>\n<p>Finally, in nested &lt;Route&gt;s, we write the &lt;Outlet/&gt; tag below so that these &lt;Link&gt;s can work. This way, we can create nested &lt;Route&gt;s.</p>\n<pre>import React from "react";<br>import { Link, Outlet } from "react-router-dom";<br><br>function History() {<br>  return (<br>    &lt;&gt;<br>      &lt;div&gt;History&lt;/div&gt;<br>      &lt;nav&gt;<br>        &lt;Link to={"company"}&gt;Our Companies&lt;/Link&gt;<br>        &lt;Link to={"team"}&gt;Team&lt;/Link&gt;<br>      &lt;/nav&gt;<br>      &lt;Outlet /&gt;<br>    &lt;/&gt;<br>  );<br>}<br><br>export default History;</pre>\n<h3>Dynamic Path</h3>\n<p>In some cases, we may need to assign dynamic paths. For example, we may want to go to a user’s profile and, of course, we will not create a separate &lt;Route&gt; for each user. For this, we can dynamically create the path part. For example, in the &lt;Members&gt; component, let\'s store our users, and for the information or profile of each user, we can use the &lt;MemberDetail&gt; component. We can write the path attribute of this &lt;MemberDetail&gt; component as follows:</p>\n<pre>&lt;Route path="/members" element={&lt;Members /&gt;} /&gt;<br>&lt;Route path="/members/:memberId" element={&lt;MemberDetail /&gt;} /&gt;</pre>\n<p>And now we can use the memberId variable in the desired way within the &lt;MemberDetail&gt; component. Actually, it\'s very similar to props. To access this ID information, we can import and use useParams. This way, we can use the dynamically passed ID information in the &lt;MemberDetail&gt; component.</p>\n<pre>import React from "react";<br>import { useParams } from "react-router-dom";<br><br>function MemberDetail() {<br>  const { memberId } = useParams();<br>  return &lt;div&gt;MemberDetail : {memberId}&lt;/div&gt;;<br>}<br><br>export default MemberDetail;</pre>\n<h3>useSearchParams</h3>\n<p>Now let’s take a look at the useSearchParams property, which we often see in many React projects. This feature allows us to easily apply filtering. For example, when we want to filter active users on our website, we can take advantage of this property. After importing useSearchParams which the snippet is pretty similar to useState, we create two buttons as an example.</p>\n<pre>import React from "react";<br>import { useSearchParams } from "react-router-dom";<br>function Members() {<br>  const [searchParams, setSearchParams] = useSearchParams();<br>  &lt;button&gt;Active Members&lt;/button&gt;<br>  &lt;button&gt;All Members&lt;/button&gt;<br>  );<br>}<br>export default Members;</pre>\n<p>In the onClick property of the “active” button, I pass the setSearchParams function and set the filter to “active”.</p>\n<pre>&lt;button onClick={() =&gt; setSearchParams({ filter: "active" })}&gt;<br>  Active Members<br>&lt;/button&gt;</pre>\n<p>Then, I use the .get() property to assign these to the isActive variable. This way, when our filter gains the “active” property, isActive becomes true. In this way, I can display the active member information on the screen.</p>\n<pre>const isActive = searchParams.get("filter") === "active";</pre>\n<p>If we do not provide any filter to setSearchParams, it will not filter anything, so the isActive property will be false, and we can reach all users in this way.</p>\n<pre>&lt;button onClick={() =&gt; setSearchParams()}&gt;All Members&lt;/button&gt;</pre>\n<p>Since I am not currently using any user data, I can currently display &lt;h2&gt; tags based on the value of isActive.</p>\n<pre>import React from "react";<br>import { useSearchParams } from "react-router-dom";<br><br>function Members() {<br>  const [searchParams, setSearchParams] = useSearchParams();<br>  const isActive = searchParams.get("filter") === "active";<br>  return (<br>    &lt;&gt;<br>      &lt;div&gt;Members&lt;/div&gt;;<br>      &lt;button onClick={() =&gt; setSearchParams({ filter: "active" })}&gt;<br>        Active Members<br>      &lt;/button&gt;<br>      &lt;button onClick={() =&gt; setSearchParams()}&gt;All Members&lt;/button&gt;<br>      {isActive ? &lt;h2&gt;Active Member&lt;/h2&gt; : &lt;h2&gt;All Members&lt;/h2&gt;}<br>    &lt;/&gt;<br>  );<br>}<br><br>export default Members;</pre>\n<p>In this article, I shared the basics of how to use the Router and pointed out the different Router features. Router is a powerful tool for managing page navigation in React applications and is important for improving user experience. I hope this article has provided the basics you need to understand the use of the Router and use it effectively in your applications. Thanks to the flexibility of the router, creating rich and interactive user interfaces is now more accessible.</p>\n<p><em>This article is a compilation of notes I took from an online software development course I attended.</em></p>\n<img src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=cd2eba75be76" width="1" height="1" alt="">\n',
        content:
          '\n<p>Router is a tool that facilitates connections and transitions between web pages and makes our job much easier. In this article, we will cover the basics of using Routers in React applications and the different Router features.</p>\n<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*S0TnDWvaYhqNZcfOdcslIQ.png"></figure><p>After installing the necessary packages for router usage, we first wrap our App component with &lt;BrowserRouter&gt; tags in the index.js file to enable the router features.</p>\n<pre>&lt;BrowserRouter&gt;<br>  &lt;App /&gt;<br>&lt;/BrowserRouter&gt;</pre>\n<p>After doing this, in App.js, we need to import {Routes, Route}. Inside the return statement, we can now use each &lt;Route&gt; tag between the &lt;Routes&gt; tags. Each &lt;Route&gt; tag corresponds to a page, and the link we provide in the path attribute of the Route tag determines the path of our component. If you write a path as path="/", it will act as your homepage and will be the page that appears first when the localhost is opened (<a href="http://localhost:3000/">http://localhost:3000/</a>). Then, you can create different routers like path="/aboutUs" (<a href="http://localhost:3000/aboutUs">http://localhost:3000/aboutUs</a>) to facilitate navigation between pages.</p>\n<pre>import { Routes, Route } from "react-router-dom";<br>import Home from "./components/Home";<br>import AboutUs from "./components/aboutUs";<br><br>function App() {<br>  return (<br>    &lt;div className="App"&gt;<br>      &lt;Navbar /&gt;<br>      &lt;Routes&gt;<br>        &lt;Route path="/" element={&lt;Home /&gt;} /&gt;<br>        &lt;Route path="/aboutUs" element={&lt;AboutUs /&gt;} /&gt;<br>      &lt;/Routes&gt;<br>    &lt;/div&gt;<br>  );<br>}<br>export default App;</pre>\n<h3>NavLink</h3>\n<p>Now let’s take a look at NavLink, which is necessary for page transitions. Probably the best example would be creating a navbar. After creating a navbar in a separate component, we import the {NavLink} property and between the &lt;nav&gt; tags in the return part of our Navbar.js file, we open a &lt;NavLink&gt; tag for each page we want to navigate to. We provide the same links in the "to" attribute of these link tags as we provided in the path attribute in App.js. This way, when we click on these &lt;NavLink&gt;s, we can navigate between pages. Additionally, our &lt;NavLink&gt;s have an active property. It automatically adds the "active" class to the currently active page. You can make your navbar more functional by applying CSS to the “active” class.</p>\n<pre>import React from "react";<br>import { NavLink } from "react-router-dom";<br><br>function Navbar() {<br>  return (<br>    &lt;nav className="mainNav"&gt;<br>      &lt;NavLink to="/"&gt;Home&lt;/NavLink&gt;<br>      &lt;NavLink to="/aboutUs"&gt;About&lt;/NavLink&gt;<br>      &lt;NavLink to="/mission"&gt;Mission&lt;/NavLink&gt;<br>    &lt;/nav&gt;<br>  );<br>}<br><br>export default Navbar;</pre>\n<h3>useNavigate</h3>\n<p>Now, if we want to dynamically navigate from one page to another, for example, by clicking a button, what should we use? Here comes the useNavigate feature. For example, if we want to go from the Home page to the Mission page by clicking a button, we need to do the following: First, of course, import useNavigate.</p>\n<pre>import { useNavigate } from "react-router-dom";</pre>\n<p>Then, we can assign useNavigate() to a variable for easier use.</p>\n<pre>const navigate = useNavigate();</pre>\n<p>Next, we should assign this navigate() function to the onClick attribute of our button, and write the path we want to go to inside the parentheses.</p>\n<pre>&lt;button onClick={() =&gt; navigate("/mission")}&gt;Go to Mission&lt;/button&gt;</pre>\n<p>This way, when we click the button, we can go to the “Mission” page.</p>\n<pre>import React from "react";<br>import { useNavigate } from "react-router-dom";<br><br>function Home() {<br>  const navigate = useNavigate();<br>  return (<br>    &lt;&gt;<br>      &lt;div&gt;Home&lt;/div&gt;<br>      &lt;button onClick={() =&gt; navigate("/mission")}&gt;Go to Mission&lt;/button&gt;<br>    &lt;/&gt;<br>  );<br>}<br><br>export default Home;</pre>\n<h3>404 Not Found</h3>\n<p>Sometimes we may mistype a link and go to a non-existent path, resulting in a “page not found” or “404 not found” page. How can we create this page? For this, we can create a new component and inform the user that they have landed on the wrong page. After creating the “WrongPath.js” file, you can write the message you want to display on the screen.</p>\n<pre>import React from "react";<br><br>function WrongPath() {<br>  return &lt;div&gt;Hmmm, we couldn\'t find any matches.&lt;/div&gt;;<br>}<br><br>export default WrongPath;</pre>\n<p>Then, add a new &lt;Route&gt; in App.js, and set the path attribute of this &lt;Route&gt; to " * <em>". The " * </em>", if the link the user typed does not match any path, directly redirects to this &lt;Route&gt;, and this way, you can see your error page message.</p>\n<pre>&lt;Route path="*" element={&lt;WrongPath /&gt;} /&gt;</pre>\n<h3>Nested Routes</h3>\n<p>Can we nest different &lt;Route&gt;s inside a &lt;Route&gt; element and branch our tree? Yes. For this, instead of closing the &lt;Route&gt; tag of the page we want to branch in a single line, we close it with "&lt;/Route&gt;" and enter inside.</p>\n<pre>&lt;Route path="/history" element={&lt;History /&gt;}&gt;<br><br>&lt;/Route&gt;</pre>\n<p>Here, we can write as many new &lt;Route&gt;s as we want. And of course, we give them path attributes. However, there is one thing to be careful about here: if we start with "/" in nested &lt;Route&gt;s, we get an error. Therefore, in nested &lt;Route&gt;s, we should directly write the path name without using "/" (path="example").</p>\n<pre>&lt;Route path="/history" element={&lt;History /&gt;}&gt;<br>  &lt;Route path="team" element={&lt;Team /&gt;} /&gt;<br>  &lt;Route path="company" element={&lt;Company /&gt;} /&gt;<br>&lt;/Route&gt;</pre>\n<p>Then, in the parent &lt;Route&gt; page, we place our link tags for the navigational buttons, either &lt;Link&gt; or &lt;NavLink&gt;.</p>\n<pre>&lt;nav&gt;<br>  &lt;Link to={"company"}&gt;Our Companies&lt;/Link&gt;<br>  &lt;Link to={"team"}&gt;Team&lt;/Link&gt;<br>&lt;/nav&gt;</pre>\n<p>Finally, in nested &lt;Route&gt;s, we write the &lt;Outlet/&gt; tag below so that these &lt;Link&gt;s can work. This way, we can create nested &lt;Route&gt;s.</p>\n<pre>import React from "react";<br>import { Link, Outlet } from "react-router-dom";<br><br>function History() {<br>  return (<br>    &lt;&gt;<br>      &lt;div&gt;History&lt;/div&gt;<br>      &lt;nav&gt;<br>        &lt;Link to={"company"}&gt;Our Companies&lt;/Link&gt;<br>        &lt;Link to={"team"}&gt;Team&lt;/Link&gt;<br>      &lt;/nav&gt;<br>      &lt;Outlet /&gt;<br>    &lt;/&gt;<br>  );<br>}<br><br>export default History;</pre>\n<h3>Dynamic Path</h3>\n<p>In some cases, we may need to assign dynamic paths. For example, we may want to go to a user’s profile and, of course, we will not create a separate &lt;Route&gt; for each user. For this, we can dynamically create the path part. For example, in the &lt;Members&gt; component, let\'s store our users, and for the information or profile of each user, we can use the &lt;MemberDetail&gt; component. We can write the path attribute of this &lt;MemberDetail&gt; component as follows:</p>\n<pre>&lt;Route path="/members" element={&lt;Members /&gt;} /&gt;<br>&lt;Route path="/members/:memberId" element={&lt;MemberDetail /&gt;} /&gt;</pre>\n<p>And now we can use the memberId variable in the desired way within the &lt;MemberDetail&gt; component. Actually, it\'s very similar to props. To access this ID information, we can import and use useParams. This way, we can use the dynamically passed ID information in the &lt;MemberDetail&gt; component.</p>\n<pre>import React from "react";<br>import { useParams } from "react-router-dom";<br><br>function MemberDetail() {<br>  const { memberId } = useParams();<br>  return &lt;div&gt;MemberDetail : {memberId}&lt;/div&gt;;<br>}<br><br>export default MemberDetail;</pre>\n<h3>useSearchParams</h3>\n<p>Now let’s take a look at the useSearchParams property, which we often see in many React projects. This feature allows us to easily apply filtering. For example, when we want to filter active users on our website, we can take advantage of this property. After importing useSearchParams which the snippet is pretty similar to useState, we create two buttons as an example.</p>\n<pre>import React from "react";<br>import { useSearchParams } from "react-router-dom";<br>function Members() {<br>  const [searchParams, setSearchParams] = useSearchParams();<br>  &lt;button&gt;Active Members&lt;/button&gt;<br>  &lt;button&gt;All Members&lt;/button&gt;<br>  );<br>}<br>export default Members;</pre>\n<p>In the onClick property of the “active” button, I pass the setSearchParams function and set the filter to “active”.</p>\n<pre>&lt;button onClick={() =&gt; setSearchParams({ filter: "active" })}&gt;<br>  Active Members<br>&lt;/button&gt;</pre>\n<p>Then, I use the .get() property to assign these to the isActive variable. This way, when our filter gains the “active” property, isActive becomes true. In this way, I can display the active member information on the screen.</p>\n<pre>const isActive = searchParams.get("filter") === "active";</pre>\n<p>If we do not provide any filter to setSearchParams, it will not filter anything, so the isActive property will be false, and we can reach all users in this way.</p>\n<pre>&lt;button onClick={() =&gt; setSearchParams()}&gt;All Members&lt;/button&gt;</pre>\n<p>Since I am not currently using any user data, I can currently display &lt;h2&gt; tags based on the value of isActive.</p>\n<pre>import React from "react";<br>import { useSearchParams } from "react-router-dom";<br><br>function Members() {<br>  const [searchParams, setSearchParams] = useSearchParams();<br>  const isActive = searchParams.get("filter") === "active";<br>  return (<br>    &lt;&gt;<br>      &lt;div&gt;Members&lt;/div&gt;;<br>      &lt;button onClick={() =&gt; setSearchParams({ filter: "active" })}&gt;<br>        Active Members<br>      &lt;/button&gt;<br>      &lt;button onClick={() =&gt; setSearchParams()}&gt;All Members&lt;/button&gt;<br>      {isActive ? &lt;h2&gt;Active Member&lt;/h2&gt; : &lt;h2&gt;All Members&lt;/h2&gt;}<br>    &lt;/&gt;<br>  );<br>}<br><br>export default Members;</pre>\n<p>In this article, I shared the basics of how to use the Router and pointed out the different Router features. Router is a powerful tool for managing page navigation in React applications and is important for improving user experience. I hope this article has provided the basics you need to understand the use of the Router and use it effectively in your applications. Thanks to the flexibility of the router, creating rich and interactive user interfaces is now more accessible.</p>\n<p><em>This article is a compilation of notes I took from an online software development course I attended.</em></p>\n<img src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=cd2eba75be76" width="1" height="1" alt="">\n',
        enclosure: {},
        categories: [
          "usesearchparams",
          "react",
          "navlink",
          "react-router",
          "usenavigate",
        ],
      },
    ],
  },
];
